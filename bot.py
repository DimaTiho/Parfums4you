@dp.callback_query_handler(lambda c: c.data == "view_cart")
async def view_cart(call: types.CallbackQuery):
    uid = call.from_user.id
    cart = user_data.get(uid, {}).get("cart", {})
    if not cart:
        await call.message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    msg = "üõí –í–∞—à –∫–æ—à–∏–∫:\n"
    for i, (name, qty) in enumerate(cart.items(), 1):
        msg += f"{i}. {name} √ó {qty} —à—Ç\n"
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å", callback_data="edit_cart"),
        InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")
    )
    kb.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è", callback_data="next_step"),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="order")
    )
    await call.message.answer(msg, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "clear_cart")
async def clear_cart(call: types.CallbackQuery):
    uid = call.from_user.id
    user_data.get(uid, {}).pop("cart", None)
    await call.message.answer("üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")
    await view_cart(call)

@dp.callback_query_handler(lambda c: c.data == "edit_cart")
async def edit_cart(call: types.CallbackQuery):
    uid = call.from_user.id
    cart = user_data.get(uid, {}).get("cart", {})
    if not cart:
        await call.message.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for item in cart:
        kb.add(InlineKeyboardButton(f"‚úèÔ∏è {item}", callback_data=f"edit_{item}"))
    kb.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_cart"))
    await call.message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("edit_"))
async def prompt_edit_quantity(call: types.CallbackQuery):
    perfume = call.data[5:]
    user_data[call.from_user.id]["selected_edit"] = perfume
    await call.message.answer(f"‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è '{perfume}':")

@dp.message_handler(lambda m: "selected_edit" in user_data.get(m.from_user.id, {}))
async def save_edited_quantity(message: types.Message):
    uid = message.from_user.id
    perfume = user_data[uid].pop("selected_edit")
    if not message.text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–ª–æ–º")
        return
    qty = int(message.text)
    if qty <= 0:
        user_data[uid]["cart"].pop(perfume, None)
        await message.answer(f"‚ùå '{perfume}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞.")
    else:
        user_data[uid]["cart"][perfume] = qty
        await message.answer(f"‚úèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å '{perfume}' –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {qty}.")
    await view_cart(types.CallbackQuery(from_user=message.from_user, message=message))

@dp.callback_query_handler(lambda c: c.data == "next_step")
async def ask_name(call: types.CallbackQuery):
    uid = call.from_user.id
    user_data[uid]["order"] = {}
    await call.message.answer("üë§ –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º º—è:")

@dp.message_handler(lambda m: "name" not in user_data.get(m.from_user.id, {}).get("order", {}))
async def get_name(message: types.Message):
    uid = message.from_user.id
    user_data[uid].setdefault("order", {})["name"] = message.text
    await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@dp.message_handler(lambda m: "phone" not in user_data.get(m.from_user.id, {}).get("order", {}))
async def get_phone(message: types.Message):
    uid = message.from_user.id
    user_data[uid]["order"]["phone"] = message.text
    await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:")

@dp.message_handler(lambda m: "city" not in user_data.get(m.from_user.id, {}).get("order", {}))
async def get_city(message: types.Message):
    uid = message.from_user.id
    user_data[uid]["order"]["city"] = message.text
    await message.answer("üì¶ –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—à—Ç–∏:")

@dp.message_handler(lambda m: "address" not in user_data.get(m.from_user.id, {}).get("order", {}))
async def get_address(message: types.Message):
    uid = message.from_user.id
    user_data[uid]["order"]["address"] = message.text
    await confirm_order_prompt(uid, message)

async def confirm_order_prompt(uid, message):
    cart = user_data[uid].get("cart", {})
    order = user_data[uid].get("order", {})
    if not cart or not order:
        await message.answer("‚ùó –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø–æ–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return

    total = 0
    items_text = ""
    for name, qty in cart.items():
        price = perfume_prices.get(name, 200)
        line_total = price * qty
        total += line_total
        items_text += f"- {name} √ó {qty} —à—Ç ‚Äî {line_total} –≥—Ä–Ω\n"

    delivery_note = "üöö –î–æ—Å—Ç–∞–≤–∫–∞: "
    if total >= FREE_DELIVERY_THRESHOLD:
        delivery_note += "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞"
    else:
        delivery_note += f"{DELIVERY_COST} –≥—Ä–Ω"
        total += DELIVERY_COST

    summary = (
        f"üîç –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
        f"üë§ –Ü–º º—è: {order['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
        f"üèô –ú—ñ—Å—Ç–æ: {order['city']}\n"
        f"üì¶ –ê–¥—Ä–µ—Å–∞/–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {order['address']}\n\n"
        f"üõç –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{items_text}"
        f"{delivery_note}\n"
        f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total} –≥—Ä–Ω"
    )

    await message.answer(summary + "\n\n‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
