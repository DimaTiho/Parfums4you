
# –û–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è: –ø–æ—á–∞—Ç–æ–∫
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, ReplyKeyboardRemove
from aiogram.utils import executor
from datetime import datetime
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù'
GOOGLE_SHEET_NAME = 'Parfums'
CREDENTIALS_FILE = 'credentials.json'
COST_PRICE = 80
FREE_DELIVERY_THRESHOLD = 500
DELIVERY_COST = 70

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
workbook = client.open(GOOGLE_SHEET_NAME)
sheet = workbook.sheet1
try:
    analytics_sheet = workbook.worksheet("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")
except:
    analytics_sheet = workbook.add_worksheet(title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", rows="10", cols="2")
    analytics_sheet.update("A1", [["–ü–æ–∫–∞–∑–Ω–∏–∫", "–ó–Ω–∞—á–µ–Ω–Ω—è"],
                                   ["–£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å", ""],
                                   ["–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", ""],
                                   ["–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", ""],
                                   ["–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∞—Ä–æ–º–∞—Ç", ""]])

# === –î–∞–Ω—ñ ===
perfumes = {
    "–ñ—ñ–Ω–æ—á—ñ": [
        {"name": "Chanel Chance", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Dior J'adore", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Lanc√¥me La Vie Est Belle", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "YSL Mon Paris", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ],
    "–ß–æ–ª–æ–≤—ñ—á—ñ": [
        {"name": "Dior Sauvage", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Versace Eros", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Bleu de Chanel", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Paco Rabanne Invictus", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ],
    "–£–Ω—ñ—Å–µ–∫—Å": [
        {"name": "Tom Ford Black Orchid", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Creed Aventus", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Molecule 01", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Byredo Gypsy Water", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ],
    "–¢–û–ü –ø—Ä–æ–¥–∞–∂": [
        {"name": "Dior Sauvage", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Chanel Chance", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Tom Ford Black Orchid", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ]
}

perfume_prices = {p["name"]: 200 for cat in perfumes.values() for p in cat}

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ===
from aiogram.dispatcher.filters import Text

@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    user_data[message.from_user.id] = {"cart": {}, "state": None}
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º—ñ–≤", callback_data="show_perfumes"),
        InlineKeyboardButton("üéÅ –ê–∫—Ü—ñ—ó —Ç–∞ –ë–æ–Ω—É—Å–∏", callback_data="show_promotions"),
        InlineKeyboardButton("üì¶ –ö–æ—à–∏–∫", callback_data="view_cart"),
        InlineKeyboardButton("‚Ñπ –Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?", callback_data="how_to_order"),
        InlineKeyboardButton("üì® –ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/your_manager_username")
    )
    await message.answer("üå∏ –í—ñ—Ç–∞—î–º–æ —É —Å–≤—ñ—Ç—ñ –∞—Ä–æ–º–∞—Ç—ñ–≤!
–û–±–∏—Ä–∞–π—Ç–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ç–∞ –∑–∞–º–æ–≤–ª—è–π—Ç–µ –∑—Ä—É—á–Ω–æ:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "show_promotions")
async def show_promotions(call: types.CallbackQuery):
    promo_text = "\n".join([f"- {k}: {v['description']}" for k, v in promotions.items() if k != "–ë–µ–∑ –∑–Ω–∏–∂–∫–∏"])
    await call.message.answer(f"üéÅ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó:
{promo_text}")


@dp.callback_query_handler(lambda c: c.data == "show_perfumes")
async def show_perfumes(call: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë® –ß–æ–ª–æ–≤—ñ—á—ñ", callback_data="cat_–ß–æ–ª–æ–≤—ñ—á—ñ"),
        InlineKeyboardButton("üë© –ñ—ñ–Ω–æ—á—ñ", callback_data="cat_–ñ—ñ–Ω–æ—á—ñ"),
        InlineKeyboardButton("üåø –£–Ω—ñ—Å–µ–∫—Å", callback_data="cat_–£–Ω—ñ—Å–µ–∫—Å"),
        InlineKeyboardButton("üîù –¢–û–ü –ø—Ä–æ–¥–∞–∂", callback_data="cat_–¢–û–ü –ø—Ä–æ–¥–∞–∂"),
        InlineKeyboardButton("üîé –ó–Ω–∞–π—Ç–∏ –Ω–∞–∑–≤—É", callback_data="search_perfume"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–∞", callback_data="main_menu")
    )
    await call.message.answer("üì¶ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def show_perfume_by_category(call: types.CallbackQuery):
    category = call.data.split("_")[1]
    for perfume in perfumes[category]:
        name = perfume["name"]
        photo = perfume["photo"]
        price = perfume_prices.get(name, 200)
        text = f"üíé {name}
üí∞ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω"
        keyboard = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton("‚ûï –î–æ –∫–æ—à–∏–∫–∞", callback_data=f"add_{name}"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_perfumes")
        )
        await call.message.answer_photo(photo=photo, caption=text, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith("add_"))
async def add_to_cart(call: types.CallbackQuery):
    perfume_name = call.data[4:]
    uid = call.from_user.id
    if uid not in user_data:
        user_data[uid] = {"cart": {}}
    cart = user_data[uid].setdefault("cart", {})
    cart[perfume_name] = cart.get(perfume_name, 0) + 1
    await call.message.answer(f"üß∫ –î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞: {perfume_name}")


@dp.callback_query_handler(lambda c: c.data == "view_cart")
async def view_cart(call: types.CallbackQuery):
    uid = call.from_user.id
    cart = user_data.get(uid, {}).get("cart", {})
    if not cart:
        await call.message.answer("üß∫ –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    lines = ["üõí –í–∞—à –∫–æ—à–∏–∫:"]
    total = 0
    for name, qty in cart.items():
        price = perfume_prices.get(name, 200)
        subtotal = price * qty
        lines.append(f"‚Ä¢ {name} ‚Äî {qty} —à—Ç √ó {price} –≥—Ä–Ω = {subtotal} –≥—Ä–Ω")
        total += subtotal
    lines.append(f"
üíµ –°—É–º–∞: {total} –≥—Ä–Ω")
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="confirm_order"),
        InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_perfumes")
    )
    await call.message.answer("\n".join(lines), reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "clear_cart")
async def clear_cart(call: types.CallbackQuery):
    uid = call.from_user.id
    user_data[uid]["cart"] = {}
    await call.message.answer("üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")


@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def back_to_main(call: types.CallbackQuery):
    await welcome(call.message)
