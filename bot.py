import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.utils.markdown import escape_md

BOT_TOKEN = '7511346484:AAEm89gjBctt55ge8yEqrfHrxlJ-yS4d56U'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –î–∞–Ω—ñ –ø–∞—Ä—Ñ—É–º—ñ–≤ (–∑–∞–≥–ª—É—à–∫–∏ –Ω–∞–∑–≤–∏ —ñ —Ñ–æ—Ç–æ)
perfumes = {
    'female': [
        {
            'id': 'f1',
            'name': '–ü–∞—Ä—Ñ—É–º –ñ—ñ–Ω–æ—á–∏–π 1',
            'photo': 'https://via.placeholder.com/150?text=–ñ—ñ–Ω–æ—á–∏–π+1',
            'price': 200
        },
        {
            'id': 'f2',
            'name': '–ü–∞—Ä—Ñ—É–º –ñ—ñ–Ω–æ—á–∏–π 2',
            'photo': 'https://via.placeholder.com/150?text=–ñ—ñ–Ω–æ—á–∏–π+2',
            'price': 200
        },
    ],
    'unisex': [
        {
            'id': 'u1',
            'name': '–ü–∞—Ä—Ñ—É–º –£–Ω—ñ—Å–µ–∫—Å 1',
            'photo': 'https://via.placeholder.com/150?text=–£–Ω—ñ—Å–µ–∫—Å+1',
            'price': 200
        },
        {
            'id': 'u2',
            'name': '–ü–∞—Ä—Ñ—É–º –£–Ω—ñ—Å–µ–∫—Å 2',
            'photo': 'https://via.placeholder.com/150?text=–£–Ω—ñ—Å–µ–∫—Å+2',
            'price': 200
        },
    ],
    'top': [
        {
            'id': 't1',
            'name': '–¢–û–ü –ü–∞—Ä—Ñ—É–º 1',
            'photo': 'https://via.placeholder.com/150?text=–¢–û–ü+1',
            'price': 200
        },
        {
            'id': 't2',
            'name': '–¢–û–ü –ü–∞—Ä—Ñ—É–º 2',
            'photo': 'https://via.placeholder.com/150?text=–¢–û–ü+2',
            'price': 200
        },
    ]
}

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –∫–æ—à–∏–∫–∏: user_id -> list —Ç–æ–≤–∞—Ä—ñ–≤
user_carts = {}

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
def main_menu_kb():
    kb = InlineKeyboardMarkup(row_width=6)
    kb.add(
        InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º", callback_data="catalog"),
        InlineKeyboardButton("–ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏", callback_data="promos"),
        InlineKeyboardButton("–ó–Ω–∏–∂–∫–∞ –¥–Ω—è", callback_data="discount_day"),
        InlineKeyboardButton("–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?", callback_data="how_to_order"),
        InlineKeyboardButton("–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏", callback_data="contact_us"),
        InlineKeyboardButton("–ö–æ—à–∏–∫", callback_data="cart")
    )
    return kb

# --- –ú–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥—É ---
def catalog_menu_kb():
    kb = InlineKeyboardMarkup(row_width=4)
    kb.add(
        InlineKeyboardButton("–ñ—ñ–Ω–æ—á—ñ", callback_data="cat_female"),
        InlineKeyboardButton("–£–Ω—ñ—Å–µ–∫—Å", callback_data="cat_unisex"),
        InlineKeyboardButton("–¢–û–ü –ü–†–û–î–ê–ñ", callback_data="cat_top"),
        InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥", callback_data="main_menu")
    )
    return kb

# --- –ö–Ω–æ–ø–∫–∏ –ø—ñ–¥ –ø–∞—Ä—Ñ—É–º–æ–º ---
def perfume_buttons_kb():
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞", callback_data="add_to_cart"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    return kb

# --- –ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∫–∞—Ä—Ç–∏–Ω–∫–∞ + —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∏) ---
async def send_main_menu(message_or_callback):
    text = (
        "–í—ñ—Ç–∞—î–º–æ —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ –ø–∞—Ä—Ñ—É–º—ñ–≤!\n"
        "–û–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –¥—ñ–π—Ç–µ –∑–∞ –º–µ–Ω—é."
    )
    main_photo_url = "https://via.placeholder.com/400x200?text=–ì–æ–ª–æ–≤–Ω–µ+–ú–µ–Ω—é+–ü–∞—Ä—Ñ—É–º—ñ–≤"

    if isinstance(message_or_callback, types.Message):
        await bot.send_photo(
            message_or_callback.chat.id,
            main_photo_url,
            caption=text,
            reply_markup=main_menu_kb()
        )
    else:  # CallbackQuery
        await message_or_callback.message.edit_media(
            media=types.InputMediaPhoto(media=main_photo_url, caption=text, parse_mode='HTML'),
            reply_markup=main_menu_kb()
        )

# --- –û–±—Ä–æ–±–∫–∞ –±—É–¥—å-—è–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∑–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é) ---
@dp.message_handler()
async def any_message_handler(message: types.Message):
    await send_main_menu(message)

# --- –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–∞ –∫–∞—Ç–∞–ª–æ–≥—É ---
@dp.callback_query_handler(lambda c: True)
async def process_callback(callback: types.CallbackQuery):
    data = callback.data

    if data == "main_menu":
        await send_main_menu(callback)
        await callback.answer()

    elif data == "catalog":
        text = "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∞—Ä—Ñ—É–º—ñ–≤:"
        await callback.message.edit_text(text, reply_markup=catalog_menu_kb())
        await callback.answer()

    elif data in ["cat_female", "cat_unisex", "cat_top"]:
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
        category_map = {
            "cat_female": "female",
            "cat_unisex": "unisex",
            "cat_top": "top"
        }
        category_key = category_map[data]
        perfumes_list = perfumes[category_key]

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ 2 –ø–∞—Ä—Ñ—É–º–∏ –≤ 1 —Ä—è–¥–æ–∫ (–ø–æ–∫–∏ —â–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ)
        # –ß–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è Telegram, –∫—Ä–∞—â–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ –æ–∫—Ä–µ–º–æ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–∞—Ä—Ñ—É–º—É
        # –ê–ª–µ —Ç—É—Ç –∑—Ä–æ–±–∏–º–æ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ 2 –Ω–∞–∑–≤–∞–º–∏ —ñ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ

        text = f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category_key.capitalize()}\n–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ñ—É–º:"

        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –∑ —Ñ–æ—Ç–æ —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏
        media_group = [
            types.InputMediaPhoto(media=perfumes_list[0]['photo'], caption=f"{perfumes_list[0]['name']}\n–¶—ñ–Ω–∞: {perfumes_list[0]['price']} –≥—Ä–Ω"),
            types.InputMediaPhoto(media=perfumes_list[1]['photo'], caption=f"{perfumes_list[1]['name']}\n–¶—ñ–Ω–∞: {perfumes_list[1]['price']} –≥—Ä–Ω"),
        ]
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –±–æ edit_media –¥–ª—è –≥—Ä—É–ø–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è
        await callback.message.delete()
        await bot.send_media_group(callback.message.chat.id, media_group)

        # –ü—ñ—Å–ª—è —Ñ–æ—Ç–æ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
        # –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è - –ø—ñ–¥ –∫–æ–∂–Ω–∏–º —Ñ–æ—Ç–æ –±—É–¥–µ –æ–¥–Ω–∞–∫–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞, –∞–ª–µ Telegram –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î inline –ø—ñ–¥ —Ñ–æ—Ç–æ –æ–∫—Ä–µ–º–æ,
        # —Ç–æ–º—É –≤ –∫–æ–∂–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç—å –∑–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—ñ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.

        kb = InlineKeyboardMarkup(row_width=3)
        for p in perfumes_list:
            kb.add(
                InlineKeyboardButton(f"‚ûï –î–æ–¥–∞—Ç–∏ {p['name']} –¥–æ –∫–æ—à–∏–∫–∞", callback_data=f"add_{p['id']}"),
            )
        kb.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
            InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")
        )

        await bot.send_message(callback.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=kb)
        await callback.answer()

    elif data.startswith("add_"):
        user_id = callback.from_user.id
        perfume_id = data[4:]

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞—Ä—Ñ—É–º –∑–∞ id
        all_perfumes = perfumes['female'] + perfumes['unisex'] + perfumes['top']
        perfume_item = next((p for p in all_perfumes if p['id'] == perfume_id), None)
        if perfume_item is None:
            await callback.answer("–ü–∞—Ä—Ñ—É–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –î–æ–¥–∞—î–º–æ –¥–æ –∫–æ—à–∏–∫–∞
        user_carts.setdefault(user_id, [])
        user_carts[user_id].append(perfume_item)

        await callback.answer(f"–¢–æ–≤–∞—Ä '{perfume_item['name']}' –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–æ—à–∏–∫–∞!", show_alert=True)

    else:
        await callback.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
# –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–¥—É –Ω–∏–∂—á–µ –∞–±–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –±–ª–æ–∫–∏

# --- –¢–µ–∫—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤ ---
PROMOS_TEXT = (
    "üéâ –ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏:\n\n"
    "1. 1+1 –∑—ñ –∑–Ω–∏–∂–∫–æ—é 20% –Ω–∞ –¥—Ä—É–≥–∏–π —Ç–æ–≤–∞—Ä\n"
    "2. –ü–∞–∫–µ—Ç–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è: 4 –ø–∞—Ä—Ñ—É–º–∏ –∑–∞ 680 –≥—Ä–Ω\n"
    "3. –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 600 –≥—Ä–Ω\n"
    "4. –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ 2 —à—Ç (–±–µ–∑ –∞–∫—Ü—ñ–π)\n"
    "5. –†–æ–∑—ñ–≥—Ä–∞—à —Å–µ—Ä–µ–¥ –Ω–æ–≤–∏—Ö –ø–æ–∫—É–ø—Ü—ñ–≤\n"
)

DISCOUNT_DAY_ITEM = {
    'id': 'discount_day_1',
    'name': '–ü–∞—Ä—Ñ—É–º –ó–Ω–∏–∂–∫–∞ –î–Ω—è',
    'photo': 'https://via.placeholder.com/150?text=–ó–Ω–∏–∂–∫–∞+–î–Ω—è',
    'original_price': 200,
    'discount_price': 160
}

HOW_TO_ORDER_TEXT = (
    "üõí –Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?\n\n"
    "1. –û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ñ—É–º —É –∫–∞—Ç–∞–ª–æ–∑—ñ.\n"
    "2. –î–æ–¥–∞–π—Ç–µ —É –∫–æ—à–∏–∫.\n"
    "3. –û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ—à–∏–∫.\n"
    "4. –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
    "5. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó.\n"
)

CONTACT_US_TEXT = (
    "üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏:\n\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +38 099 123 45 67\n"
    "Telegram: @parfum_shop_support\n"
    "Email: support@parfumshop.ua\n"
)

# --- –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" ---
def back_to_main_kb():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
    return kb

# --- –û–±—Ä–æ–±–∫–∞ callback –¥–ª—è –Ω–æ–≤–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é ---
@dp.callback_query_handler(lambda c: c.data in ["promos", "discount_day", "how_to_order", "contact_us"])
async def special_sections_handler(callback: types.CallbackQuery):
    data = callback.data

    if data == "promos":
        await callback.message.edit_text(PROMOS_TEXT, reply_markup=back_to_main_kb())
        await callback.answer()

    elif data == "discount_day":
        caption = (
            f"{DISCOUNT_DAY_ITEM['name']}\n"
            f"–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {DISCOUNT_DAY_ITEM['discount_price']} –≥—Ä–Ω (–∑–≤–∏—á–∞–π–Ω–∞ {DISCOUNT_DAY_ITEM['original_price']} –≥—Ä–Ω)"
        )
        photo_url = DISCOUNT_DAY_ITEM['photo']
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞"
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞", callback_data=f"add_{DISCOUNT_DAY_ITEM['id']}"),
            InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        await callback.message.edit_media(
            media=types.InputMediaPhoto(media=photo_url, caption=caption),
            reply_markup=kb
        )
        await callback.answer()

    elif data == "how_to_order":
        await callback.message.edit_text(HOW_TO_ORDER_TEXT, reply_markup=back_to_main_kb())
        await callback.answer()

    elif data == "contact_us":
        await callback.message.edit_text(CONTACT_US_TEXT, reply_markup=back_to_main_kb())
        await callback.answer()

# --- –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è "–ó–Ω–∏–∂–∫–∞ –¥–Ω—è" –¥–æ –∫–æ—à–∏–∫–∞ ---
@dp.callback_query_handler(lambda c: c.data == f"add_{DISCOUNT_DAY_ITEM['id']}")
async def add_discount_day_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # –§–æ—Ä–º—É—î–º–æ —Ç–æ–≤–∞—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é
    perfume_item = {
        'id': DISCOUNT_DAY_ITEM['id'],
        'name': DISCOUNT_DAY_ITEM['name'],
        'price': DISCOUNT_DAY_ITEM['discount_price'],
        'photo': DISCOUNT_DAY_ITEM['photo']
    }
    user_carts.setdefault(user_id, [])
    user_carts[user_id].append(perfume_item)
    await callback.answer(f"–¢–æ–≤–∞—Ä '{perfume_item['name']}' –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–æ—à–∏–∫–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é!", show_alert=True)

# --- –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ---
@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def go_main_menu(callback: types.CallbackQuery):
    await send_main_menu(callback)
    await callback.answer()
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loader import dp
from utils.cart import get_cart, calculate_cart_total, clear_cart
from data.config import SHEET_NAME
from loader import sheet, bot

class OrderState(StatesGroup):
    full_name = State()
    phone = State()
    city = State()
    delivery_type = State()
    address = State()
    post_service = State()
    post_number = State()

@dp.message_handler(text="–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def start_order(message: types.Message, state: FSMContext):
    cart = get_cart(message.from_user.id)
    if not cart:
        await message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    await message.answer("‚úç –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë")
    await OrderState.full_name.set()

@dp.message_handler(state=OrderState.full_name)
async def get_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("üìû –í–∫–∞–∂—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
    await OrderState.phone.set()

@dp.message_handler(state=OrderState.phone)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üèô –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏")
    await OrderState.city.set()

@dp.message_handler(state=OrderState.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–æ—à—Ç—É", callback_data="delivery_post"),
        InlineKeyboardButton("üöö –ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery_address")
    )

    await message.answer("üöö –û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω—É –¥–ª—è –≤–∞—Å –¥–æ—Å—Ç–∞–≤–∫—É", reply_markup=keyboard)
    await OrderState.delivery_type.set()

@dp.callback_query_handler(lambda c: c.data == "delivery_address", state=OrderState.delivery_type)
async def address_delivery(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup()
    await bot.send_message(callback_query.from_user.id, "üìù –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏")
    await state.update_data(delivery_type="–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞")
    await OrderState.address.set()

@dp.message_handler(state=OrderState.address)
async def get_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await finish_order(message, state)

@dp.callback_query_handler(lambda c: c.data == "delivery_post", state=OrderState.delivery_type)
async def post_delivery(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup()

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data="nova_poshta"),
        InlineKeyboardButton("–£–∫—Ä–ø–æ—à—Ç–∞", callback_data="ukrposhta")
    )

    await bot.send_message(callback_query.from_user.id, "üìÆ –û–±–µ—Ä—ñ—Ç—å –ø–æ—à—Ç–æ–≤—É —Å–ª—É–∂–±—É", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data in ["nova_poshta", "ukrposhta"], state=OrderState.delivery_type)
async def get_post_service(callback_query: types.CallbackQuery, state: FSMContext):
    service = "–ù–æ–≤–∞ –ü–æ—à—Ç–∞" if callback_query.data == "nova_poshta" else "–£–∫—Ä–ø–æ—à—Ç–∞"
    await callback_query.message.edit_reply_markup()
    await bot.send_message(callback_query.from_user.id, f"üî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è {service}")
    await state.update_data(delivery_type="–ü–æ—à—Ç–æ–≤–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", post_service=service)
    await OrderState.post_number.set()

@dp.message_handler(state=OrderState.post_number)
async def get_post_number(message: types.Message, state: FSMContext):
    await state.update_data(post_number=message.text)
    await finish_order(message, state)

async def finish_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cart = get_cart(message.from_user.id)
    total = calculate_cart_total(cart)

    items = "\n".join([f"- {item['name']} x{item['quantity']} = {item['price']*item['quantity']} –≥—Ä–Ω" for item in cart])

    order_text = (
        f"üßæ <b>–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
        f"{items}\n\n"
        f"üí∞ <b>–†–∞–∑–æ–º:</b> {total} –≥—Ä–Ω\n\n"
        f"üë§ –ü–Ü–ë: {data.get('full_name')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"üèô –ú—ñ—Å—Ç–æ: {data.get('city')}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery_type')}\n"
    )

    if data.get("delivery_type") == "–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞":
        order_text += f"üè° –ê–¥—Ä–µ—Å–∞: {data.get('address')}\n"
    else:
        order_text += (
            f"üìÆ –°–ª—É–∂–±–∞: {data.get('post_service')}\n"
            f"üè§ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ: {data.get('post_number')}\n"
        )

    await message.answer(order_text, parse_mode="HTML")
    
    # –ó–∞–ø–∏—Å –¥–æ Google Sheets
    sheet.append_row([
        message.from_user.id,
        data.get('full_name'),
        data.get('phone'),
        data.get('city'),
        data.get('delivery_type'),
        data.get('address') or f"{data.get('post_service')} ‚Ññ{data.get('post_number')}",
        str(total)
    ], table_range=SHEET_NAME)

    clear_cart(message.from_user.id)
    await state.finish()
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
