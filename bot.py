import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, ReplyKeyboardRemove
from aiogram.utils import executor
from datetime import datetime
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = '7511346484:AAEm89gjBctt55ge8yEqrfHrxlJ-yS4d56U'
GOOGLE_SHEET_NAME = 'Parfums'
CREDENTIALS_FILE = 'credentials.json'
COST_PRICE = 80
FREE_DELIVERY_THRESHOLD = 500
DELIVERY_COST = 70

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
workbook = client.open(Parfums)
sheet = workbook.sheet1
try:
    analytics_sheet = workbook.worksheet("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")
except:
    analytics_sheet = workbook.add_worksheet(title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", rows="10", cols="2")
    analytics_sheet.update("A1", [["–ü–æ–∫–∞–∑–Ω–∏–∫", "–ó–Ω–∞—á–µ–Ω–Ω—è"],
                                  ["–£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å", ""],
                                  ["–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", ""],
                                  ["–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", ""],
                                  ["–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∞—Ä–æ–º–∞—Ç", ""]])

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
user_data = {}
# === –î–∞–Ω—ñ ===

perfumes = {
"–ñ—ñ–Ω–æ—á—ñ": [
        {"name": "Chanel Chance", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Dior J'adore", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Lanc√¥me La Vie Est Belle", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "YSL Mon Paris", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ],
    "–ß–æ–ª–æ–≤—ñ—á—ñ": [
        {"name": "Dior Sauvage", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Versace Eros", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Bleu de Chanel", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Paco Rabanne Invictus", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ],
    "–£–Ω—ñ—Å–µ–∫—Å": [
        {"name": "Tom Ford Black Orchid", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Creed Aventus", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Molecule 01", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Byredo Gypsy Water", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ],
    "–¢–û–ü –ø—Ä–æ–¥–∞–∂": [
        {"name": "Dior Sauvage", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Chanel Chance", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Tom Ford Black Orchid", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ]
}
# –¶—ñ–Ω–∏ –Ω–∞ –ø–∞—Ä—Ñ—É–º–∏

perfume_prices = {p["name"]: 200 for cat in perfumes.values() for p in cat}

promotions = {
    "1+1=–ü–æ–¥–∞—Ä—É–Ω–æ–∫": {"description": "–ö—É–ø–∏ 2 ‚Äî —Ç—Ä–µ—Ç—ñ–π —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫", "discount": 66.67},
    "–ü–∞—Ä—Ñ—É–º –¥–Ω—è": {"description": "-20 –≥—Ä–Ω –Ω–∞ –æ–±—Ä–∞–Ω–∏–π –∞—Ä–æ–º–∞—Ç", "discount": 20},
    "–ü–µ—Ä—à–∏–π –∫–ª—ñ—î–Ω—Ç": {"description": "10% –∑–Ω–∏–∂–∫–∞ –Ω–∞ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "discount": 20},
    "–¢–∞—î–º–Ω–µ —Å–ª–æ–≤–æ": {"description": "–ù–∞–∑–≤–∏ —Å–ª–æ–≤–æ '–ê–†–û–ú–ê–¢' ‚Äî –∑–Ω–∏–∂–∫–∞ 15 –≥—Ä–Ω", "discount": 15},
    "–ë–µ–∑ –∑–Ω–∏–∂–∫–∏": {"description": "–ë–µ–∑ –∞–∫—Ü—ñ–π", "discount": 0},
}

# === –ë–æ—Ç ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
user_data = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    photo_url = "https://fleurparfum.net.ua/images/blog/shleifovie-duhi-woman.jpg.pagespeed.ce.3PKNQ9Vn2Z.jpg"
    caption = (
        "üß¥ *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Å–≤—ñ—Ç—É!*\n\n"
        "üå∫ –£ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—Ä–µ–Ω–¥–æ–≤—ñ –∂—ñ–Ω–æ—á—ñ, —á–æ–ª–æ–≤—ñ—á—ñ —Ç–∞ —É–Ω—ñ—Å–µ–∫—Å –ø–∞—Ä—Ñ—É–º–∏ ‚Äî –æ–±—Ä–∞–Ω—ñ –∑ –ª—é–±–æ–≤'—é.\n"
        "üí∏ –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ —Ü—ñ–Ω–∏ —Ç–∞ —â–µ–¥—Ä—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n"
        "üéÅ –£—Å—ñ –ø–æ–∫—É–ø—Ü—ñ –º–æ–∂—É—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ. –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ ‚Äî –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 500 –≥—Ä–Ω.\n\n"
        "üëá –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.")
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º—ñ–≤", callback_data="show_perfumes"),
        InlineKeyboardButton("üî• –ê–∫—Ü—ñ—ó —Ç–∞ –ë–æ–Ω—É—Å–∏", callback_data="promotions")
    )
    kb.add(
        InlineKeyboardButton("‚≠ê –ó–Ω–∏–∂–∫–∞ –¥–Ω—è", callback_data="daily_deal"),
        InlineKeyboardButton("‚ÑπÔ∏è –Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?", callback_data="how_to_order")
    )
    kb.add(
        InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏", callback_data="reviews"),
        InlineKeyboardButton("üìû –ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/your_manager_username")
    )
    await message.answer_photo(photo=photo_url, caption=caption, parse_mode="Markdown", reply_markup=kb)

@dp.message_handler(commands=['start_old'])
async def start_old(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º—ñ–≤", callback_data="show_perfumes"),
        InlineKeyboardButton("üî• –ê–∫—Ü—ñ—ó / –ó–Ω–∏–∂–∫–∏", callback_data="promotions")
    )
    kb.add(
        InlineKeyboardButton("‚ÑπÔ∏è –Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?", callback_data="how_to_order"),
        InlineKeyboardButton("üí¨ –í—ñ–¥–≥—É–∫–∏", callback_data="reviews")
    )
    kb.add(
        InlineKeyboardButton("üìû –ó–≤'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/your_manager_username")
    )
    await message.answer("üåø –í—ñ—Ç–∞—î–º–æ! –ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è —É –∫–æ–∂–Ω–æ–º—É –∞—Ä–æ–º–∞—Ç—ñ.", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "show_perfumes")
async def choose_category(call: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üë® –ß–æ–ª–æ–≤—ñ—á—ñ", callback_data="cat_–ß–æ–ª–æ–≤—ñ—á—ñ"),
        InlineKeyboardButton("üë© –ñ—ñ–Ω–æ—á—ñ", callback_data="cat_–ñ—ñ–Ω–æ—á—ñ")
    )
    kb.add(
        InlineKeyboardButton("üåø –£–Ω—ñ—Å–µ–∫—Å", callback_data="cat_–£–Ω—ñ—Å–µ–∫—Å"),
        InlineKeyboardButton("üîù –¢–û–ü –ø—Ä–æ–¥–∞–∂", callback_data="top_sales")
    )
    kb.add(InlineKeyboardButton("üîé –ó–Ω–∞–π—Ç–∏ –Ω–∞–∑–≤—É", callback_data="search_perfume"))
    kb.add(
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="start"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–∞", callback_data="start")
    )
    await call.message.answer("üé≤ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –ø–æ—à—É–∫:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "search_perfume")
async def search_perfume_prompt(call: types.CallbackQuery):
    user_data.setdefault(call.from_user.id, {})["search_mode"] = True
    await call.message.answer("üîé –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∞—Ä–æ–º–∞—Ç—É –¥–ª—è –ø–æ—à—É–∫—É:")


@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("search_mode"))
async def perform_search(message: types.Message):
    query = message.text.lower()
    results = []
    for category in perfumes.values():
        for perfume in category:
            if query in perfume["name"].lower():
                results.append(perfume)

    if results:
        for p in results:
            caption = f"{p['name']} ‚Äî {perfume_prices.get(p['name'], 200)} –≥—Ä–Ω"
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"add_{p['name']}")
            )
            await message.answer_photo(p["photo"], caption=caption, reply_markup=kb)
    else:
        await message.answer("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É.")

    del user_data[message.from_user.id]["search_mode"]

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def show_perfumes(call: types.CallbackQuery):
    category = call.data[4:]
    selected = perfumes.get(category, [])
    for p in selected:
        caption = f"{p['name']} ‚Äî {perfume_prices[p['name']]} –≥—Ä–Ω"
        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"add_{p['name']}"))
        await call.message.answer_photo(photo=p["photo"], caption=caption, reply_markup=kb)

    nav_kb = InlineKeyboardMarkup(row_width=2)
    nav_kb.add(
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_perfumes"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–∞", callback_data="start")
    )
    await call.message.answer("‚¨ÖÔ∏è –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è:", reply_markup=nav_kb)

@dp.callback_query_handler(lambda c: c.data.startswith("promo_"))
async def confirm_order_prompt(call: types.CallbackQuery):
    uid = call.from_user.id
    promo_key = call.data[6:]
    data = user_data.get(uid, {})

    if "cart" not in data or not data["cart"]:
        await call.message.answer("‚ùó –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    user_data[uid]["promotion"] = promo_key
    discount = promotions[promo_key]["discount"]

    cart = data["cart"]
    subtotal = sum(perfume_prices.get(name, 200) * qty for name, qty in cart.items())
    discount_text = ""
    discount_amount = 0

    if promo_key == "1+1=–ü–æ–¥–∞—Ä—É–Ω–æ–∫":
        total_items = sum(cart.values())
        free_items = total_items // 3
        if free_items > 0:
            cheapest_price = min(perfume_prices.get(name, 200) for name in cart)
            discount_amount = cheapest_price * free_items
            discount_text = f"\nüéÅ –ê–∫—Ü—ñ—è '1+1=–ü–æ–¥–∞—Ä—É–Ω–æ–∫': -{discount_amount} –≥—Ä–Ω"
    elif promo_key == "–ü–µ—Ä—à–∏–π –∫–ª—ñ—î–Ω—Ç":
        discount_amount = subtotal * 0.10
        discount_text = f"\nüü¢ –ó–Ω–∏–∂–∫–∞ 10%: -{int(discount_amount)} –≥—Ä–Ω"
    elif promo_key == "–ü–∞—Ä—Ñ—É–º –¥–Ω—è":
        discount_amount = 20
        discount_text = f"\nüåü –ó–Ω–∏–∂–∫–∞ –Ω–∞ –∞—Ä–æ–º–∞—Ç –¥–Ω—è: -{discount_amount} –≥—Ä–Ω"
    elif promo_key == "–¢–∞—î–º–Ω–µ —Å–ª–æ–≤–æ":
        discount_amount = 15
        discount_text = f"\nüóù –¢–∞—î–º–Ω–µ —Å–ª–æ–≤–æ: -{discount_amount} –≥—Ä–Ω"

    total = subtotal - discount_amount

    if total < FREE_DELIVERY_THRESHOLD:
        total += DELIVERY_COST
        delivery_text = f"\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: +{DELIVERY_COST} –≥—Ä–Ω"
    else:
        delivery_text = "\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ"

    items_list = "\n".join([f"{qty} √ó {name} ‚Äî {perfume_prices.get(name, 200) * qty} –≥—Ä–Ω" for name, qty in cart.items()])
    summary = f"üõç –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{items_list}\n\n–°—É–º–∞: {subtotal} –≥—Ä–Ω{discount_text}{delivery_text}\n\nüí∞ –î–æ –æ–ø–ª–∞—Ç–∏: {int(total)} –≥—Ä–Ω"

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="confirm_order"),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="view_cart")
    )
    await call.message.answer(summary, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "order")
async def start_order(call: types.CallbackQuery):
    user_data[call.from_user.id] = user_data.get(call.from_user.id, {})
    user_data[call.from_user.id]["cart"] = {}
    kb = InlineKeyboardMarkup(row_width=2)
    for cat in perfumes.values():
        for p in cat:
            kb.add(InlineKeyboardButton(f"‚ûï {p['name']}", callback_data=f"add_{p['name']}"))
    kb.add(InlineKeyboardButton("üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="view_cart"))
    kb.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_perfumes"))
    await call.message.answer("–û–±–µ—Ä–∏ –∞—Ä–æ–º–∞—Ç–∏, —è–∫—ñ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("add_"))
async def ask_quantity(call: types.CallbackQuery):
    perfume_name = call.data[4:]
    user_data[call.from_user.id]["selected_perfume"] = perfume_name
    await call.message.answer(f"–°–∫—ñ–ª—å–∫–∏ –æ–¥–∏–Ω–∏—Ü—å '{perfume_name}' –¥–æ–¥–∞—Ç–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?")

@dp.message_handler(lambda m: "selected_perfume" in user_data.get(m.from_user.id, {}))
async def save_quantity_to_cart(message: types.Message):
    if not message.text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–ª–æ–º.")
        return
    qty = int(message.text)
    uid = message.from_user.id
    perfume = user_data[uid].pop("selected_perfume")
    cart = user_data[uid].setdefault("cart", {})
    cart[perfume] = cart.get(perfume, 0) + qty
    await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ {qty} √ó {perfume} –¥–æ –∫–æ—à–∏–∫–∞.")
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ", callback_data="order"),
        InlineKeyboardButton("üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="view_cart")
    )
    kb.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_perfumes"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=kb)
  
@dp.callback_query_handler(lambda c: c.data == "checkout")
async def start_checkout(call: types.CallbackQuery):
    uid = call.from_user.id
    if "cart" not in user_data.get(uid, {}):
        await call.message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    user_data[uid]["step"] = "get_name"
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="start"))
    await call.message.answer("üßë –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

@dp.message_handler(lambda m: "name" not in user_data.get(m.from_user.id, {}))
async def get_phone(message: types.Message):
    
    user_data[message.from_user.id]["name"] = message.text
    user_data[message.from_user.id]["step"] = "get_phone"
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="start"))
    await message.answer("üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=kb)

@dp.message_handler(lambda m: "phone" not in user_data.get(m.from_user.id, {}))
async def get_city(message: types.Message):
    if message.from_user.id not in user_data:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ /start –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üìù –ó–∞–º–æ–≤–∏—Ç–∏'")
        return
    user_data[message.from_user.id]["phone"] = message.text
    user_data[message.from_user.id]["step"] = "get_city"
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="start"))
    await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ, –∫—É–¥–∏ –±—É–¥–µ –∑–¥—ñ–π—Å–Ω–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data in ["delivery_address", "delivery_np"])
async def ask_for_address(call: types.CallbackQuery):
    method = "–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞" if call.data == "delivery_address"else "–ù–æ–≤–∞ –ü–æ—à—Ç–∞"
    user_data[call.from_user.id]["delivery_method"] = method
    note = "üìç –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:" if method == "–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞" else "üè§ –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü:"
    await call.message.answer(note + "‚ÄºÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É–≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º.")

@dp.message_handler(lambda m: user_data.get(m.from_user.id, {}).get("step") == "get_city")
async def get_city(message: types.Message):
    uid = message.from_user.id
    user_data[uid]["city"] = message.text
    user_data[uid]["step"] = None  # –∞–±–æ "get_delivery_method" —è–∫—â–æ —Ö–æ—á–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç–∏
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üì¶ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data="delivery_np"),
        InlineKeyboardButton("‚úâÔ∏è –£–∫—Ä–ø–æ—à—Ç–∞", callback_data="delivery_ukr"),
    )
    kb.add(InlineKeyboardButton("üè† –ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery_address"))
    kb.add(InlineKeyboardButton("üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="start"))
    await message.answer("üì¨–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)




@dp.callback_query_handler(lambda c: c.data.startswith("promo_"))
async def confirm_order_prompt(call: types.CallbackQuery):
    uid = call.from_user.id
    promo_key = call.data[6:]
    data = user_data.get(uid, {})
  
    if "cart" not in data or not data["cart"]:
        await call.message.answer("‚ùó –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    user_data[uid]["promotion"] = promo_key
    discount = promotions[promo_key]["discount"]
    
    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ
    subtotal = 0
    summary_lines = []
    for perfume, qty in data["cart"].items():
        price = perfume_prices.get(perfume, 200)
        line_total = max(0, price * qty - discount * qty)
        subtotal += line_total
        summary_lines.append(f"{perfume} √ó {qty} = {line_total:.2f} –≥—Ä–Ω")
        subtotal += line_total
    # –ó–Ω–∏–∂–∫–∞
    discount_value = 0
    if promo_key == "1+1=–ü–æ–¥–∞—Ä—É–Ω–æ–∫":
        total_qty = sum(data["cart"].values())
        free_items = total_qty // 3
        discount_value = free_items * 200  # –≤–∞—Ä—Ç—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∞—Ä–æ–º–∞—Ç—É
    elif promo_key == "–ü–µ—Ä—à–∏–π –∫–ª—ñ—î–Ω—Ç":
        discount_value = subtotal * 0.10
    elif promo_key == "–ü–∞—Ä—Ñ—É–º –¥–Ω—è":
        discount_value = 20
    elif promo_key == "–¢–∞—î–º–Ω–µ —Å–ª–æ–≤–æ":
        discount_value = 15
    else:
        discount_amount = int(discount)
      

    delivery_fee = 0 if total_after_discount >= FREE_DELIVERY_THRESHOLD else DELIVERY_COST
    final_total = total_after_discount + delivery_fee

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—É–º–∏
    user_data[uid]["total"] = final_total

    promo_text = promotions[promo_key]["description"]
    summary = "\n".join(summary_lines)
    delivery_text = "üöö –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞" if delivery_fee == 0 else f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {DELIVERY_COST} –≥—Ä–Ω"
    final_msg = (
        f"üßæ *–ü—ñ–¥—Å—É–º–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n"
        f"{summary}\n"
        f"üí∞ –°—É–º–∞: {subtotal} –≥—Ä–Ω\n"
        f"üéÅ –ó–Ω–∏–∂–∫–∞ ({promo_text}): -{discount_amount} –≥—Ä–Ω\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞ {delivery_text}\n"
        f"‚úÖ *–î–æ —Å–ø–ª–∞—Ç–∏: {final_total} –≥—Ä–Ω*\n\n"
        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?"
    )

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="confirm_order"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_cart")
    )
    await call.message.answer(order_summary, parse_mode="Markdown", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "finalize_order")
async def finalize_order(call: types.CallbackQuery):
    uid = call.from_user.id
    data = user_data.get(uid, {})
    if not data:
        await call.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞! –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Google Sheets
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    cart_summary = ", ".join([f"{k} √ó {v}" for k, v in data["cart"].items()])
    sheet.append_row([
        now,
        data.get("name", ""),
        data.get("phone", ""),
        data.get("city", ""),
        cart_summary,
        data.get("promotion", "–ë–µ–∑ –∑–Ω–∏–∂–∫–∏"),
        data.get("total", 0)
    ])
        
        

    for row in full_rows:
        sheet.append_row(row)

    analytics_sheet.update("B2", f"=COUNTA({sheet.title}!A2:A)")
    analytics_sheet.update("B3", f"=SUM({sheet.title}!G2:G)")
    analytics_sheet.update("B4", f"=SUM({sheet.title}!H2:H)")
    analytics_sheet.update("B5", f"=INDEX({sheet.title}!D2:D, MODE(MATCH({sheet.title}!D2:D, {sheet.title}!D2:D, 0)))")

    await call.message.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –∞–±–æ SMS.",reply_markup=kb)
    user_data.pop(uid, None)
                              
async def notify_sent_orders():
    while True:
        await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —â–æ—Ö–≤–∏–ª–∏–Ω–∏
        rows = sheet.get_all_values()
        header = rows[0]
        if "–ï–ù" in header:
            en_index = header.index("–ï–ù")
            chat_index = header.index("Chat ID")
            status_index = header.index("–°—Ç–∞—Ç—É—Å") if "–°—Ç–∞—Ç—É—Å" in header else None
            for i, row in enumerate(rows[1:], start=2):
                if len(row) > en_index and row[en_index] and (len(row) <= chat_index or not row[chat_index].startswith("‚úÖ")):
                    try:
                        chat_id = int(row[chat_index])
                        tn_number = row[en_index]
                        await bot.send_message(chat_id, f"üì¶ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                        sheet.update_cell(i, chat_index + 1, f"‚úÖ {tn_number}")
                    except Exception as e:
                        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

@dp.callback_query_handler(lambda c: c.data == "view_cart")
async def view_cart(call: types.CallbackQuery):
    uid = call.from_user.id
    cart = user_data.get(uid, {}).get("cart", {})
    if not cart:
        await call.message.answer("üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    total = 0
    lines = ["üõç *–í–∞—à –∫–æ—à–∏–∫:*"]
    for perfume, qty in cart.items():
        price = perfume_prices.get(perfume, 200)
        sum_price = qty * price
        total += sum_price
        lines.append(f"‚Ä¢ {perfume} ‚Äî {qty} —à—Ç √ó {price} –≥—Ä–Ω = {sum_price} –≥—Ä–Ω")

    delivery_note = "üöö –î–æ—Å—Ç–∞–≤–∫–∞: –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞" if total >= FREE_DELIVERY_THRESHOLD else f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: +{DELIVERY_COST} –≥—Ä–Ω"
    discount_key = user_data.get(uid, {}).get("promotion", "–ë–µ–∑ –∑–Ω–∏–∂–∫–∏")
    promo_desc = promotions.get(discount_key, {}).get("description", "–ë–µ–∑ –∞–∫—Ü—ñ—ó")

    lines.append(f"üí∞ –ü—ñ–¥—Å—É–º–æ–∫: {total} –≥—Ä–Ω")
    lines.append(delivery_note)
    lines.append(f"üéÅ –ê–∫—Ü—ñ—è/–ë–æ–Ω—É—Å: {discount_key} ({promo_desc})")

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="start_checkout"),
        InlineKeyboardButton("‚ôªÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")
    )
    kb.add(
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_perfumes"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–∞", callback_data="start")
    )
    await call.message.answer("".join(lines), parse_mode="Markdown", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "clear_cart")
async def clear_cart(call: types.CallbackQuery):
    uid = call.from_user.id
    if uid in user_data:
        user_data[uid]["cart"] = {}
    await call.message.answer("üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")


@dp.callback_query_handler(lambda c: c.data == "start_checkout")
async def start_checkout(call: types.CallbackQuery):
    uid = call.from_user.id
    if uid not in user_data or not user_data[uid].get("cart"):
        await call.message.answer("‚ùó –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏.")
        return
    await call.message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(notify_sent_orders())
    executor.start_polling(dp, skip_updates=True, loop=loop)
