import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = '7511346484:AAEm89gjBctt55ge8yEqrfHrxlJ-yS4d56U'

# Google Sheets –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("Parfums").sheet1

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class OrderStates(StatesGroup):
    name = State()
    phone = State()
    city = State()
    delivery_type = State()
    address_or_post = State()
    confirmation = State()

# –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞
user_carts = {}
user_discounts = {}
user_data = {}

# –°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu_buttons = [
    [InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º", callback_data="catalog")],
    [InlineKeyboardButton("–ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏", callback_data="promotions")],
    [InlineKeyboardButton("–ó–Ω–∏–∂–∫–∞ –¥–Ω—è", callback_data="daily_discount")],
    [InlineKeyboardButton("–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?", callback_data="how_to_order")],
    [InlineKeyboardButton("–í—ñ–¥–≥—É–∫–∏", callback_data="reviews")],
    [InlineKeyboardButton("–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/yourmanager")]
]
main_menu = InlineKeyboardMarkup(inline_keyboard=main_menu_buttons)

@dp.message_handler(lambda message: message.text == "–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏" or message.text.lower() == "/how_to_order")
async def how_to_order(message: types.Message):
    instructions = (
        "üõç *–Ø–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n"
        "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ *–ö–∞—Ç–∞–ª–æ–≥* —ñ –æ–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ñ—É–º–∏\n"
        "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å *–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫*\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É *–ö–æ—à–∏–∫* —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å *–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n"
        "4Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñ (—ñ–º‚Äô—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –º—ñ—Å—Ç–æ, –¥–æ—Å—Ç–∞–≤–∫–∞)\n"
        "5Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî —ñ –º–∏ –≤—Å–µ –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!\n\n"
        "üßæ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –¢–¢–ù –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏."
    )
    await message.answer(instructions)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç, —è —Ç–≤—ñ–π —á–∞—Ç-–±–æ—Ç, —â–æ–± –º–µ–Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞—Ç–∏—Å–Ω–∏ /start",
    )
    await message.answer(
        "üß¥ *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Å–≤—ñ—Ç—É!*\n\n"
        "üå∫ –£ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—Ä–µ–Ω–¥–æ–≤—ñ –∂—ñ–Ω–æ—á—ñ, —á–æ–ª–æ–≤—ñ—á—ñ —Ç–∞ —É–Ω—ñ—Å–µ–∫—Å –ø–∞—Ä—Ñ—É–º–∏ ‚Äî –æ–±—Ä–∞–Ω—ñ –∑ –ª—é–±–æ–≤'—é.\n"
        "üí∏ –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ —Ü—ñ–Ω–∏ —Ç–∞ —â–µ–¥—Ä—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n"
        "üéÅ –£—Å—ñ –ø–æ–∫—É–ø—Ü—ñ –º–æ–∂—É—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ. –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ ‚Äî –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 500 –≥—Ä–Ω.\n\n"
        "üëá –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.",
        reply_markup=main_menu
    )

# === –ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º—ñ–≤ ===
catalog_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton("–ñ—ñ–Ω–æ—á—ñ", callback_data="cat_women"), InlineKeyboardButton("–£–Ω—ñ—Å–µ–∫—Å", callback_data="cat_unisex")],
    [InlineKeyboardButton("–¢–æ–ø –ø—Ä–æ–¥–∞–∂", callback_data="cat_top")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
])

perfume_catalog = {
    "cat_women": [
        {"name": "Chanel Coco Mademoiselle", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA."},
        {"name": "Dior J'adore", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA."}
    ],
    "cat_unisex": [
        {"name": "Tom Ford Tobacco Vanille", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA."},
        {"name": "Byredo Gypsy Water", "price": 200, "photo": "https://example.com/byredo.jpg"}
    ],
    "cat_top": [
        {"name": "Creed Aventus", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA."},
        {"name": "Maison Francis Kurkdjian Baccarat Rouge", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA."}
    ]
}

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def handle_category(callback: types.CallbackQuery):
    perfumes = perfume_catalog.get(callback.data, [])
    for p in perfumes:
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞", callback_data=f"add_{p['name']}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"), InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await bot.send_photo(callback.from_user.id, p['photo'], caption=f"*{p['name']}*\nüí∏ {p['price']} –≥—Ä–Ω", reply_markup=buttons)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "catalog")
async def show_catalog(callback: types.CallbackQuery):
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∞—Ä—Ñ—É–º—ñ–≤:", reply_markup=catalog_menu)

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def back_to_main(callback: types.CallbackQuery):
    await bot.send_photo(
    chat_id=callback.message.chat.id,
    photo="https://fleurparfum.net.ua/images/blog/shleifovie-duhi-woman.jpg.pagespeed.ce.3PKNQ9Vn2Z.jpg",  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    caption=(
        "üß¥ *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Å–≤—ñ—Ç—É!*\n\n"
        "üå∫ –£ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—Ä–µ–Ω–¥–æ–≤—ñ –∂—ñ–Ω–æ—á—ñ, —á–æ–ª–æ–≤—ñ—á—ñ —Ç–∞ —É–Ω—ñ—Å–µ–∫—Å –ø–∞—Ä—Ñ—É–º–∏ ‚Äî –æ–±—Ä–∞–Ω—ñ –∑ –ª—é–±–æ–≤'—é.\n"
        "üí∏ –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ —Ü—ñ–Ω–∏ —Ç–∞ —â–µ–¥—Ä—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n"
        "üéÅ –£—Å—ñ –ø–æ–∫—É–ø—Ü—ñ –º–æ–∂—É—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ. –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ ‚Äî –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 500 –≥—Ä–Ω.\n\n"
        "üëá –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.",
        reply_markup=main_menu
    )
# –ó–Ω–∏–∂–∫–∞ –¥–Ω—è
daily_discount = {}
last_discount_update = None

def generate_daily_discount():
    global daily_discount, last_discount_update
    all_perfumes = sum(perfume_catalog.values(), [])
    daily_discount = random.choice(all_perfumes)
    last_discount_update = datetime.now().date()

@dp.callback_query_handler(lambda c: c.data == "daily_discount")
async def show_daily_discount(callback: types.CallbackQuery):
    global daily_discount, last_discount_update
    if daily_discount == {} or last_discount_update != datetime.now().date():
        generate_daily_discount()
    p = daily_discount
    discounted_price = int(p['price'] * 0.5)
    caption = f"*–ó–Ω–∏–∂–∫–∞ –¥–Ω—è!*"

–°—å–æ–≥–æ–¥–Ω—ñ —É –Ω–∞—Å –∞–∫—Ü—ñ—è –Ω–∞:
*{p['name']}*
 "üí∏ –ó–∞–º—ñ—Å—Ç—å {p['price']} –≥—Ä–Ω ‚Äî –ª–∏—à–µ {discounted_price} –≥—Ä–Ω!"

"–í—Å—Ç–∏–≥–Ω—ñ—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é!"
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é", callback_data=f"discount_{p['name']}")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await bot.send_photo(callback.from_user.id, p['photo'], caption=caption, reply_markup=buttons)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("discount_"))
async def add_discount_to_cart(callback: types.CallbackQuery):
    name = callback.data.replace("discount_", "")
    user_id = callback.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = []
    user_carts[user_id].append(name + " (–∑—ñ –∑–Ω–∏–∂–∫–æ—é)")
    user_discounts[user_id] = name
    await callback.answer("–î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é!")
# === –í—ñ–¥–≥—É–∫–∏ –∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º ===
used_promo_users = set()
PROMO_CODES = ["PROMO10", "DISCOUNT15", "SALE20"]

@dp.message_handler(content_types=types.ContentTypes.ANY)
async def handle_reviews(message: types.Message):
    if message.text and message.text.startswith("/"):
        return  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏

    user_id = message.from_user.id
    if user_id in used_promo_users:
        await message.reply("–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥.")
        return


    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
    promo = PROMO_CODES.pop() if PROMO_CODES else "THANKYOU5"
    used_promo_users.add(user_id)
    await message.reply(f"–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! üéÅ –û—Å—å –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥: *{promo}*\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –π–æ–≥–æ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.")

# –ë–ª–æ–∫: –ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏
@dp.message_handler(lambda message: message.text == "–ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏")
async def promotions_handler(message: types.Message):
    promo_text = "üéâ *–ù–∞—è–≤–Ω—ñ –∞–∫—Ü—ñ—ó:*"

"1Ô∏è‚É£ *3-–π –ø–∞—Ä—Ñ—É–º —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫*"
"–ö—É–ø—ñ—Ç—å 2 –±—É–¥—å-—è–∫—ñ –ø–∞—Ä—Ñ—É–º–∏ ‚Äî —Ç—Ä–µ—Ç—ñ–π –æ—Ç—Ä–∏–º–∞—î—Ç–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ"

"2Ô∏è‚É£ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 500 –≥—Ä–Ω*
"–û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É –≤—ñ–¥ 500 –≥—Ä–Ω (–±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏) ‚Äî –º–∏ –¥–æ—Å—Ç–∞–≤–∏–º–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ!"

"3Ô∏è‚É£ *–ó–Ω–∏–∂–∫–∞ –¥–ª—è –ø–æ–¥—Ä—É–≥ ‚Äî 10% –∫–æ–∂–Ω—ñ–π!*"
"–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –ø–æ–¥—Ä—É–≥—É ‚Äî –æ–±–∏–¥–≤—ñ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∑–Ω–∏–∂–∫—É 10%."

"4Ô∏è‚É£ *–ù–∞–±—ñ—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é -15%*"
"–ü—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ 3+ –ø–∞—Ä—Ñ—É–º—ñ–≤ ‚Äî –∑–Ω–∏–∂–∫–∞ 15% –Ω–∞ –∫–æ–∂–µ–Ω."

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ 3-–π –ø–∞—Ä—Ñ—É–º", callback_data="promo_cond_1"),
        InlineKeyboardButton("üì¶ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—ó –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="promo_cond_2"),
        InlineKeyboardButton("üì¶ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ –∑ –ø–æ–¥—Ä—É–≥–æ—é", callback_data="promo_cond_3"),
        InlineKeyboardButton("üì¶ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ –Ω–∞–±–æ—Ä—É –∑—ñ –∑–Ω–∏–∂–∫–æ—é", callback_data="promo_cond_4"),
        InlineKeyboardButton("üì¶ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")
    )

    await message.answer(promo_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("promo_cond_"))
async def promo_conditions(call: types.CallbackQuery):
    conditions = {
        "promo_cond_1": "üéâ *3-–π –ø–∞—Ä—Ñ—É–º —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫*
–ö—É–ø—ñ—Ç—å 2 –±—É–¥—å-—è–∫—ñ –ø–∞—Ä—Ñ—É–º–∏ ‚Äî —Ç—Ä–µ—Ç—ñ–π –æ—Ç—Ä–∏–º–∞—î—Ç–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ.
(–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –≤ –æ–±–ª—ñ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∞)",
        "promo_cond_2": "üöö *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 500 –≥—Ä–Ω*
–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏ –º–∞—î –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 500 –≥—Ä–Ω.",
        "promo_cond_3": "üë≠ *–ó–Ω–∏–∂–∫–∞ –¥–ª—è –ø–æ–¥—Ä—É–≥ ‚Äî 10% –∫–æ–∂–Ω—ñ–π!*
–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—Ä—É–∑—ñ. –û–±–∏–¥–≤—ñ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∑–Ω–∏–∂–∫—É –ø—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
        "promo_cond_4": "üéÅ *–ù–∞–±—ñ—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é -15%*
–ü—Ä–∏ –∫—É–ø—ñ–≤–ª—ñ 3 –∞–±–æ –±—ñ–ª—å—à–µ –ø–∞—Ä—Ñ—É–º—ñ–≤ ‚Äî –∑–Ω–∏–∂–∫–∞ 15% –Ω–∞ –∫–æ–∂–µ–Ω."
    }
    await call.message.answer(conditions[call.data])
    await call.answer()

# === –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫–æ—à–∏–∫–∞ ===
@dp.callback_query_handler(lambda c: c.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    perfume_name = callback.data[4:]
    user_id = callback.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = []
    user_carts[user_id].append(perfume_name)
    await callback.answer("–î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!")

@dp.message_handler(commands=["cart"])
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    text = "üõí *–í–∞—à –∫–æ—à–∏–∫:*\n" + "\n".join(f"‚Ä¢ {item}" for item in cart)
    await message.answer(text)

@dp.message_handler(commands=["clearcart"])
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    user_carts[user_id] = []
    await message.answer("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")

# === –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ===
@dp.message_handler(commands=["order"])
async def start_order(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *—ñ–º‚Äô—è*:")
    await OrderStates.name.set()

@dp.message_handler(state=OrderStates.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*:")
    await OrderStates.phone.set()

@dp.message_handler(state=OrderStates.phone)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *–º—ñ—Å—Ç–æ*:")
    await OrderStates.city.set()

@dp.message_handler(state=OrderStates.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üì¶ –ù–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", callback_data="delivery_branch")],
        [InlineKeyboardButton("üöö –ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery_address")]
    ])
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=buttons)
    await OrderStates.delivery_type.set()

@dp.callback_query_handler(state=OrderStates.delivery_type)
async def get_delivery_type(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "delivery_branch":
        await state.update_data(delivery_type="–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è")
        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:")
    else:
        await state.update_data(delivery_type="–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞")
        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await OrderStates.address_or_post.set()
    await callback.answer()

@dp.message_handler(state=OrderStates.address_or_post)
async def get_address(message: types.Message, state: FSMContext):
    await state.update_data(address_or_post=message.text)
    data = await state.get_data()
    summary = f"*–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ –¥–∞–Ω—ñ:*\n\n"
    summary += f"üë§ –Ü–º‚Äô—è: {data['name']}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\nüèô –ú—ñ—Å—Ç–æ: {data['city']}\n"
    summary += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery_type']}\nüì¶ –î–µ—Ç–∞–ª—ñ: {data['address_or_post']}\n"
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_order")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")]
    ])
    await message.answer(summary, reply_markup=buttons)
    await OrderStates.confirmation.set()
# === –ü—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¢–¢–ù ===
@dp.message_handler(commands=["track_ttns"])
async def track_pending_orders(message: types.Message):
    all_data = sheet.get_all_values()
    for i, row in enumerate(all_data[1:], start=2):  # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –∑ 2
        if len(row) >= 10 and not row[9].strip():  # —è–∫—â–æ –¢–¢–ù —â–µ –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ
            try:
                chat_id = int(row[1])
                await asyncio.sleep(2)  # –Ω–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                current_row = sheet.row_values(i)
                if len(current_row) >= 10 and current_row[9].strip():
                    ttn = current_row[9].strip()
                    await bot.send_message(chat_id, f"üì¶ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!\n–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó: *{ttn}*")
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –¢–¢–ù: {e}")

@dp.callback_query_handler(lambda c: c.data == "confirm_order", state=OrderStates.confirmation)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, [])
    total = len(cart) * 200
    if total > 500:
        delivery = 0
    else:
        delivery = 80
    final_total = total + delivery
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([now, user_id, data['name'], data['phone'], data['city'], data['delivery_type'], data['address_or_post'], ", ".join(cart), final_total])
    await bot.send_message(user_id, f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {final_total} –≥—Ä–Ω. –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    await state.finish()
@dp.message_handler(commands=["cart"])
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    text = "üõç *–í–∞—à –∫–æ—à–∏–∫:*\n\n"
    for i, item in enumerate(cart, 1):
        text += f"{i}. {item}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üßæ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")]
    ])
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_carts[user_id] = []
    await callback.answer("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!")
    await callback.message.edit_text("üõí –í–∞—à –∫–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")

@dp.callback_query_handler(lambda c: c.data == "checkout")
async def start_checkout(callback: types.CallbackQuery):
    await callback.message.edit_text("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")
    await OrderStates.name.set()

@dp.message_handler(state=OrderStates.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await OrderStates.phone.set()

@dp.message_handler(state=OrderStates.phone)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await OrderStates.city.set()

@dp.message_handler(state=OrderStates.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üì¶ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", callback_data="delivery_branch"),
        InlineKeyboardButton("üö™ –ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery_address")
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
    await OrderStates.delivery_type.set()

@dp.callback_query_handler(state=OrderStates.delivery_type)
async def get_delivery_type(callback: types.CallbackQuery, state: FSMContext):
    delivery_type = callback.data
    await state.update_data(delivery_type=delivery_type)
    text = "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:" if delivery_type == "delivery_address" else "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è —Ç–∞ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏:"
    await bot.send_message(callback.from_user.id, text)
    await OrderStates.address_or_post.set()

@dp.message_handler(state=OrderStates.address_or_post)
async def get_delivery_info(message: types.Message, state: FSMContext):
    await state.update_data(address_or_post=message.text)
    data = await state.get_data()
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é
    order_time = datetime.now().strftime("%Y-%m-%d %H:%M")
    sheet.append_row([
        str(user_id),
        data['name'],
        data['phone'],
        data['city'],
        "–ê–¥—Ä–µ—Å–Ω–∞" if data['delivery_type'] == "delivery_address" else "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è",
        data['address_or_post'],
        ', '.join(cart),
        order_time,
        ""
    ])

    # –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫ –ø—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    user_carts[user_id] = []

    await message.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –¢–¢–ù.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == "cancel_order", state=OrderStates.confirmation)
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback.from_user.id, "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
