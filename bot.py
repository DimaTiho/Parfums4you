import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = '7760087730:AAGcL8oADjz5VG2EDiFNuJ5taRZZKAvB1nw'
GOOGLE_SHEET_NAME = 'Parfums'
CREDENTIALS_FILE = 'credentials.json'
COST_PRICE = 80
FREE_DELIVERY_THRESHOLD = 500
DELIVERY_COST = 80

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME).sheet1

# === –î–∞–Ω—ñ ===
perfumes = {
    "–ñ—ñ–Ω–æ—á—ñ": ["Chanel Chance", "Dior J'adore"],
    "–ß–æ–ª–æ–≤—ñ—á—ñ": ["Dior Sauvage", "Versace Eros"],
    "–£–Ω—ñ—Å–µ–∫—Å": ["Tom Ford Black Orchid", "Creed Aventus"]
}
perfume_prices = {p: 200 for cat in perfumes.values() for p in cat}

promotions = {
    "1+1=–ü–æ–¥–∞—Ä—É–Ω–æ–∫": {"description": "–ö—É–ø–∏ 2 ‚Äî —Ç—Ä–µ—Ç—ñ–π —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫", "discount": 66.67},
    "–ü–∞—Ä—Ñ—É–º –¥–Ω—è": {"description": "-20 –≥—Ä–Ω –Ω–∞ –æ–±—Ä–∞–Ω–∏–π –∞—Ä–æ–º–∞—Ç", "discount": 20},
    "–ü–µ—Ä—à–∏–π –∫–ª—ñ—î–Ω—Ç": {"description": "10% –∑–Ω–∏–∂–∫–∞ –Ω–∞ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "discount": 20},
    "–¢–∞—î–º–Ω–µ —Å–ª–æ–≤–æ": {"description": "–ù–∞–∑–≤–∏ —Å–ª–æ–≤–æ '–ê–†–û–ú–ê–¢' ‚Äî –∑–Ω–∏–∂–∫–∞ 15 –≥—Ä–Ω", "discount": 15},
    "–ë–µ–∑ –∑–Ω–∏–∂–∫–∏": {"description": "–ë–µ–∑ –∞–∫—Ü—ñ–π", "discount": 0},
}

# === –ë–æ—Ç ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
user_data = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—Ñ—É–º–∏", "–ê–∫—Ü—ñ—ó", "–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    await message.answer("üåø –í—ñ—Ç–∞—î–º–æ! –ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è —É –∫–æ–∂–Ω–æ–º—É –∞—Ä–æ–º–∞—Ç—ñ.", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Ä—Ñ—É–º–∏")
async def choose_category(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in perfumes:
        kb.add(cat)
    kb.add("–£—Å—ñ")
    await message.answer("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)

@dp.message_handler(lambda m: m.text in perfumes or m.text == "–£—Å—ñ")
async def show_perfumes(message: types.Message):
    text = "\n".join([f"- {p} (200 –≥—Ä–Ω)" for p in sum(perfumes.values(), [])]) if message.text == "–£—Å—ñ" else \
           "\n".join([f"- {p} (200 –≥—Ä–Ω)" for p in perfumes[message.text]])
    await message.answer(f"üåø {message.text} –∞—Ä–æ–º–∞—Ç–∏:\n{text}")

@dp.message_handler(lambda m: m.text == "–ê–∫—Ü—ñ—ó")
async def show_promotions(message: types.Message):
    promo_text = "\n".join([f"- {k}: {v['description']}" for k, v in promotions.items() if k != "–ë–µ–∑ –∑–Ω–∏–∂–∫–∏"])
    delivery_note = f"üöö –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ {FREE_DELIVERY_THRESHOLD} –≥—Ä–Ω (—ñ–Ω–∞–∫—à–µ +{DELIVERY_COST} –≥—Ä–Ω)"
    await message.answer(f"üî• –ê–∫—Ü—ñ—ó –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n{promo_text}\n\n{delivery_note}")

@dp.message_handler(lambda m: m.text == "–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def start_order(message: types.Message):
    user_data[message.from_user.id] = {}
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    all_perfumes = sum(perfumes.values(), [])
    for p in all_perfumes:
        kb.add(p)
    await message.answer("–û–±–µ—Ä–∏ –∞—Ä–æ–º–∞—Ç:", reply_markup=kb)

@dp.message_handler(lambda m: m.text in perfume_prices)
async def get_name(message: types.Message):
    user_data[message.from_user.id]["perfume"] = message.text
    await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")

@dp.message_handler(lambda m: "name" not in user_data.get(m.from_user.id, {}))
async def get_phone(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@dp.message_handler(lambda m: "phone" not in user_data.get(m.from_user.id, {}))
async def get_address(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    await message.answer("–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∞–±–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü):")

@dp.message_handler(lambda m: "address" not in user_data.get(m.from_user.id, {}))
async def get_quantity(message: types.Message):
    user_data[message.from_user.id]["address"] = message.text
    await message.answer("–ö—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç):")

@dp.message_handler(lambda m: "quantity" not in user_data.get(m.from_user.id, {}))
async def get_promotion(message: types.Message):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–ª–æ–º!")
        return
    user_data[message.from_user.id]["quantity"] = int(message.text)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for promo in promotions:
        kb.add(promo)
    await message.answer("–û–±–µ—Ä–∏ –∞–∫—Ü—ñ—é (–∞–±–æ '–ë–µ–∑ –∑–Ω–∏–∂–∫–∏'):", reply_markup=kb)

@dp.message_handler(lambda m: m.text in promotions)
async def confirm_order(message: types.Message):
    uid = message.from_user.id
    data = user_data[uid]
    data["promotion"] = message.text
    price = perfume_prices[data["perfume"]]
    quantity = data["quantity"]
    discount = promotions[message.text]["discount"]
    subtotal = max(0, price * quantity - discount * quantity)

    delivery_fee = 0 if subtotal >= FREE_DELIVERY_THRESHOLD else DELIVERY_COST
    total = subtotal + delivery_fee
    profit = total - (COST_PRICE * quantity)

    order_summary = (
        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
        f"–ê—Ä–æ–º–∞—Ç: {data['perfume']}\n"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity}\n"
        f"–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é: {price} –≥—Ä–Ω\n"
        f"–ê–∫—Ü—ñ—è: {message.text} (-{discount} –≥—Ä–Ω/—à—Ç)\n"
        f"–°—É–º–∞: {subtotal} –≥—Ä–Ω\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {'–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞' if delivery_fee == 0 else f'{DELIVERY_COST} –≥—Ä–Ω'}\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total} –≥—Ä–Ω\n"
        f"–ü—Ä–∏–±—É—Ç–æ–∫: {profit} –≥—Ä–Ω\n\n"
        f"–Ü–º'—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {data['address']}"
    )
    sheet.append_row([
        data['name'], data['phone'], data['address'], data['perfume'], quantity,
        message.text, total, profit, datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ])
    await message.answer(order_summary + "\n\n‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –∞–±–æ SMS.")
    del user_data[uid]

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

