@dp.callback_query_handler(lambda c: c.data in ["nova_post", "ukr_post"], state=OrderStates.delivery_type)
async def get_post_service(callback: types.CallbackQuery, state: FSMContext):
    logging.info("üì¶ –û–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞–≤–∫—É: %s", callback.data)
    await state.update_data(post_service=callback.data)
    await callback.message.answer("üìÆ –í–≤–µ–¥—ñ—Ç—å *–Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ—à—Ç–æ–º–∞—Ç—É* (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):")
    await state.set_state(OrderStates.address_or_post)  # –Ø–≤–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
    logging.info("üîÑ –°—Ç–∞–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: address_or_post")
    await callback.answer()

@dp.message_handler(state=OrderStates.address_or_post)
async def get_address_or_post(message: types.Message, state: FSMContext):
    logging.info("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∞–¥—Ä–µ—Å—É/–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: %s", message.text)
    data = await state.get_data()
    delivery_type = data['delivery_type']

    if delivery_type == "delivery_post" and not message.text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è —Ü–∏—Ñ—Ä–∞–º–∏.")
        return

    if delivery_type == "delivery_post":
        post_service = data.get('post_service', '-')
        address_or_post = f"{post_service.upper()} {message.text}"
    else:
        address_or_post = message.text

    await state.update_data(address_or_post=address_or_post)

    # –î–∞–ª—ñ: —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è order_summary, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—é

    data = await state.get_data()
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    cart = apply_third_item_discount(cart)

    text_items = ""
    total = 0
    for i, item in enumerate(cart, 1):
        text_items += f"{i}. {item['name']} ‚Äî {item['price']} –≥—Ä–Ω\n"
        total += item['price']

    discount = user_discounts.get(user_id, 0)
    final = total - discount

    order_summary = (
    f"üì¶ *–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º:*\n"
    f"üë§ *–ü–Ü–ë:* {data['name']}\n"
    f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {data['phone']}\n"
    f"üèô *–ú—ñ—Å—Ç–æ:* {data['city']}\n"
    f"üìç *–ê–¥—Ä–µ—Å–∞ / –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:* {data['address_or_post']}\n"
    f"üõç *–¢–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫—É:*\n{text_items}"
    f"üíµ *–°—É–º–∞ –±–µ–∑ –∑–Ω–∏–∂–æ–∫:* {total} –≥—Ä–Ω\n"
    f"üéÅ *–ó–Ω–∏–∂–∫–∞:* {discount} –≥—Ä–Ω\n"
    f"‚úÖ *–î–æ —Å–ø–ª–∞—Ç–∏:* {final} –≥—Ä–Ω"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_order"),
        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")
    )
    await message.answer(order_summary, reply_markup=keyboard)
    await OrderStates.confirmation.set()
