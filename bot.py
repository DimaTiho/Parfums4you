import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

API_TOKEN = '7511346484:AAEm89gjBctt55ge8yEqrfHrxlJ-yS4d56U'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- Google Sheets Setup ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("google_credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("Perfume Orders").sheet1

# --- –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –µ—Ç–∞–ø—ñ–≤ ---
class OrderForm(StatesGroup):
    name = State()
    phone = State()
    city = State()
    delivery_type = State()
    address = State()
    promo = State()

# --- –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–æ—à–∏–∫–∞ (–ø–æ user_id) ---
user_carts = {}

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
main_menu = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º", callback_data="catalog"),
    InlineKeyboardButton("–ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏", callback_data="actions"),
    InlineKeyboardButton("–ó–Ω–∏–∂–∫–∞ –¥–Ω—è", callback_data="day_discount"),
    InlineKeyboardButton("–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?", callback_data="how_to_order"),
    InlineKeyboardButton("–í—ñ–¥–≥—É–∫–∏", callback_data="reviews"),
    InlineKeyboardButton("–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact"),
    InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="view_cart")
)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    photo = types.InputFile("images/main_photo.jpg")
    text = ("\U0001F9F4 *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Å–≤—ñ—Ç—É!*")
    text += ("\n\n\U0001F33A –£ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—Ä–µ–Ω–¥–æ–≤—ñ –∂—ñ–Ω–æ—á—ñ, —á–æ–ª–æ–≤—ñ—á—ñ —Ç–∞ —É–Ω—ñ—Å–µ–∫—Å –ø–∞—Ä—Ñ—É–º–∏ ‚Äî –æ–±—Ä–∞–Ω—ñ –∑ –ª—é–±–æ–≤'—é.")
    text += ("\n\U0001F4B8 –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ —Ü—ñ–Ω–∏ —Ç–∞ —â–µ–¥—Ä—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.")
    text += ("\n\U0001F381 –£—Å—ñ –ø–æ–∫—É–ø—Ü—ñ –º–æ–∂—É—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.")
    text += ("\n\U0001F69A –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ. –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ ‚Äî –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 500 –≥—Ä–Ω.")
    text += ("\n\n‚¨á –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.")
    await message.answer_photo(photo=photo, caption=text, reply_markup=main_menu)

@dp.message_handler(lambda message: message.text.lower() in ["–ø—Ä–∏–≤—ñ—Ç", "hi", "hello"])
async def intro(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç, —è —Ç–≤—ñ–π —á–∞—Ç-–±–æ—Ç! –©–æ–± –º–µ–Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ /start")

# --- –ö–æ—à–∏–∫ ---
@dp.callback_query_handler(Text(equals="view_cart"))
async def view_cart(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await callback_query.message.edit_text("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ –ø–∞—Ä—Ñ—É–º–∏ –∑ –∫–∞—Ç–∞–ª–æ–≥—É!", reply_markup=main_menu)
        return

    text = "üõí *–í–∞—à –∫–æ—à–∏–∫:*\n"
    total = 0
    for idx, item in enumerate(cart):
        text += f"{idx+1}. {item['name']} ‚Äî {item['price']} –≥—Ä–Ω\n"
        total += item['price']

    text += f"\nüí∞ *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:* {total} –≥—Ä–Ω"
    keyboard = InlineKeyboardMarkup(row_width=2)
    for idx in range(len(cart)):
        keyboard.insert(InlineKeyboardButton(f"‚ùå {idx+1}", callback_data=f"remove_{idx}"))
    keyboard.add(
        InlineKeyboardButton("‚¨Ö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main"),
        InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout")
    )
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query_handler(Text(startswith="remove_"))
async def remove_item(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    idx = int(callback_query.data.split("_")[1])
    cart = user_carts.get(user_id, [])
    if 0 <= idx < len(cart):
        cart.pop(idx)
        user_carts[user_id] = cart
    await view_cart(callback_query)

@dp.callback_query_handler(Text(equals="checkout"))
async def checkout(callback_query: types.CallbackQuery, state: FSMContext):
    await OrderForm.name.set()
    await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")

@dp.message_handler(state=OrderForm.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await OrderForm.phone.set()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@dp.message_handler(state=OrderForm.phone)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await OrderForm.city.set()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:")

@dp.message_handler(state=OrderForm.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await OrderForm.address.set()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:")

@dp.message_handler(state=OrderForm.address)
async def get_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    cart_items = ", ".join([item['name'] for item in cart])
    total = sum(item['price'] for item in cart)

    order_data = await state.get_data()

    sheet.append_row([
        order_data['name'],
        order_data['phone'],
        order_data['city'],
        order_data['address'],
        cart_items,
        total
    ])

    await message.answer("‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=main_menu)
    await state.finish()
    user_carts[user_id] = []

# --- –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞ (–±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—å —É –∫–∞—Ç–∞–ª–æ–∑—ñ) ---
async def add_to_cart(user_id: int, item: dict):
    cart = user_carts.setdefault(user_id, [])
    cart.append(item)

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@dp.callback_query_handler(Text(equals="catalog"))
async def catalog_section(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("–ñ—ñ–Ω–æ—á—ñ", callback_data="cat_women"),
        InlineKeyboardButton("–£–Ω—ñ—Å–µ–∫—Å", callback_data="cat_unisex"),
        InlineKeyboardButton("–¢–æ–ø –ø—Ä–æ–¥–∞–∂", callback_data="cat_top")
    ).add(
        InlineKeyboardButton("‚¨Ö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è", callback_data="back_main")
    )
    await callback_query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∞—Ä—Ñ—É–º—ñ–≤:", reply_markup=keyboard)

# --- –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–∞—Ä—Ñ—É–º—ñ–≤ (–ñ—ñ–Ω–æ—á—ñ, –£–Ω—ñ—Å–µ–∫—Å, –¢–æ–ø –ø—Ä–æ–¥–∞–∂) ---
# (–∫–æ–¥ —Ç—É—Ç –∑–∞–ª–∏—à–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω)

# --- –•–µ–Ω–¥–ª–µ—Ä –∞–∫—Ü—ñ–π ---
@dp.callback_query_handler(Text(equals="actions"))
async def show_promotions(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üéâ –¢—Ä–µ—Ç—ñ–π –ø–∞—Ä—Ñ—É–º —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫", callback_data="promo1"),
        InlineKeyboardButton("üöö –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 500 –≥—Ä–Ω", callback_data="promo2"),
        InlineKeyboardButton("üïí –†–∞–Ω–∫–æ–≤–∞ –∑–Ω–∏–∂–∫–∞ -10%", callback_data="promo3"),
        InlineKeyboardButton("üéÅ –ü–∞—Ä—Ñ—É–º-—Å—é—Ä–ø—Ä–∏–∑ —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫", callback_data="promo4"),
        InlineKeyboardButton("‚¨Ö –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main"))
    await callback_query.message.edit_text("–û–±–µ—Ä–∏ –∞–∫—Ü—ñ—é, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ:", reply_markup=keyboard)

@dp.callback_query_handler(Text(equals="promo4"))
async def promo_gift_details(callback_query: types.CallbackQuery):
    text = ("üéÅ *–ü–∞—Ä—Ñ—É–º-—Å—é—Ä–ø—Ä–∏–∑ —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫*"\            "

–û—Ç—Ä–∏–º–∞–π—Ç–µ —Ä–∞–Ω–¥–æ–º–Ω–∏–π –º—ñ–Ω—ñ-–ø–∞—Ä—Ñ—É–º —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ –≤—ñ–¥ 3-—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å—É–º—É –≤—ñ–¥ 600 –≥—Ä–Ω."\
            "
–ó–Ω–∏–∂–∫–∞ –Ω–µ —Å—É–º—É—î—Ç—å—Å—è –∑ —ñ–Ω—à–∏–º–∏ –∞–∫—Ü—ñ—è–º–∏."\
            "
–ü–æ–¥–∞—Ä—É–Ω–æ–∫ –¥–æ–¥–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üõç –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –∞–∫—Ü—ñ–π", callback_data="actions")    )
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query_handler(Text(startswith="back_main"))
async def back_to_main(callback_query: types.CallbackQuery):
    await send_welcome(callback_query.message)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
