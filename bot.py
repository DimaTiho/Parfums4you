import logging
import ssl
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, ReplyKeyboardRemove
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN", 'YOUR_TOKEN_HERE')
GOOGLE_SHEET_NAME = 'Parfums'
CREDENTIALS_FILE = 'credentials.json'
COST_PRICE = 80
FREE_DELIVERY_THRESHOLD = 500
DELIVERY_COST = 70

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
if not os.path.exists(CREDENTIALS_FILE):
    raise FileNotFoundError(f"–§–∞–π–ª {CREDENTIALS_FILE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ credentials.json –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–ª—è—Ö.")
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
workbook = client.open(GOOGLE_SHEET_NAME)
sheet = workbook.sheet1
try:
    analytics_sheet = workbook.worksheet("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")
except:
    analytics_sheet = workbook.add_worksheet(title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", rows="10", cols="2")
    analytics_sheet.update("A1", [["–ü–æ–∫–∞–∑–Ω–∏–∫", "–ó–Ω–∞—á–µ–Ω–Ω—è"],
                                  ["–£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å", ""],
                                  ["–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", ""],
                                  ["–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", ""],
                                  ["–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∞—Ä–æ–º–∞—Ç", ""]])

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_data = {}

# === –î–∞–Ω—ñ ===
perfumes = {
    "–ñ—ñ–Ω–æ—á—ñ": [
        {"name": "Chanel Chance", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Dior J'adore", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Lanc√¥me La Vie Est Belle", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "YSL Mon Paris", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ],
    "–ß–æ–ª–æ–≤—ñ—á—ñ": [
        {"name": "Dior Sauvage", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Versace Eros", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Bleu de Chanel", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Paco Rabanne Invictus", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ],
    "–£–Ω—ñ—Å–µ–∫—Å": [
        {"name": "Tom Ford Black Orchid", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Creed Aventus", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Molecule 01", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Byredo Gypsy Water", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ],
    "–¢–û–ü –ø—Ä–æ–¥–∞–∂": [
        {"name": "Dior Sauvage", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Chanel Chance", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"},
        {"name": "Tom Ford Black Orchid", "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg"}
    ]
}

perfume_prices = {p["name"]: 200 for cat in perfumes.values() for p in cat}

promotions = {
    "1+1=–ü–æ–¥–∞—Ä—É–Ω–æ–∫": {"description": "–ö—É–ø–∏ 2 ‚Äî —Ç—Ä–µ—Ç—ñ–π —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫", "discount": 66.67},
    "–ü–∞—Ä—Ñ—É–º –¥–Ω—è": {"description": "-20 –≥—Ä–Ω –Ω–∞ –æ–±—Ä–∞–Ω–∏–π –∞—Ä–æ–º–∞—Ç", "discount": 20},
    "–ü–µ—Ä—à–∏–π –∫–ª—ñ—î–Ω—Ç": {"description": "10% –∑–Ω–∏–∂–∫–∞ –Ω–∞ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "discount": 20},
    "–¢–∞—î–º–Ω–µ —Å–ª–æ–≤–æ": {"description": "–ù–∞–∑–≤–∏ —Å–ª–æ–≤–æ '–ê–†–û–ú–ê–¢' ‚Äî –∑–Ω–∏–∂–∫–∞ 15 –≥—Ä–Ω", "discount": 15},
    "–ë–µ–∑ –∑–Ω–∏–∂–∫–∏": {"description": "–ë–µ–∑ –∞–∫—Ü—ñ–π", "discount": 0},
}

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===

def message_condition(field):
    return lambda message: field in user_data.get(message.from_user.id, {})

def message_missing_field(field):
    return lambda message: field not in user_data.get(message.from_user.id, {})

@dp.message(lambda message: "search_mode" in user_data.get(message.from_user.id, {}))
async def perform_search(message: types.Message):
    pass

@dp.message(lambda message: "selected_perfume" in user_data.get(message.from_user.id, {}))
async def save_quantity_to_cart(message: types.Message):
    pass

@dp.message(lambda message: "name" not in user_data.get(message.from_user.id, {}))
async def get_phone(message: types.Message):
    pass

@dp.message(lambda message: "phone" not in user_data.get(message.from_user.id, {}))
async def get_city(message: types.Message):
    if message.from_user.id not in user_data:
        await message.answer("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ /start –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üìù –ó–∞–º–æ–≤–∏—Ç–∏'")
        return
    user_data[message.from_user.id]["city"] = message.text

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üì¶ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data="np"),
        InlineKeyboardButton("üìÆ –£–∫—Ä–ø–æ—à—Ç–∞", callback_data="ukr"),
        InlineKeyboardButton("üè† –ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="address")
    )
    kb.add(InlineKeyboardButton("üîô –ù–∞ –≥–æ–ª–æ–≤–Ω—É", callback_data="start"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)

@dp.callback_query(lambda c: c.data in ["np", "ukr", "address"])
async def ask_for_address(call: types.CallbackQuery):
    delivery_methods = {
        "np": "–ù–æ–≤–∞ –ü–æ—à—Ç–∞",
        "ukr": "–£–∫—Ä–ø–æ—à—Ç–∞",
        "address": "–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞"
    }
    method = delivery_methods.get(call.data)
    user_data[call.from_user.id]["delivery_method"] = method

    prompt = {
        "–ù–æ–≤–∞ –ü–æ—à—Ç–∞": "üè§ –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü:",
        "–£–∫—Ä–ø–æ—à—Ç–∞": "üìÆ –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –ø–æ—à—Ç–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å + –∞–¥—Ä–µ—Å—É:",
        "–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞": "üìç –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:"
    }

    await call.message.answer(prompt[method] + "\n‚ÄºÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É–≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
