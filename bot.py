import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.utils import executor
from datetime import datetime
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = '7511346484:AAEm89gjBctt55ge8yEqrfHrxlJ-yS4d56U'
GOOGLE_SHEET_NAME = 'Parfums'
CREDENTIALS_FILE = 'credentials.json'
COST_PRICE = 80
FREE_DELIVERY_THRESHOLD = 500
DELIVERY_COST = 50

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
workbook = client.open(GOOGLE_SHEET_NAME)
sheet = workbook.sheet1
try:
    analytics_sheet = workbook.worksheet("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")
except:
    analytics_sheet = workbook.add_worksheet(title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", rows="10", cols="2")
    analytics_sheet.update("A1", [["–ü–æ–∫–∞–∑–Ω–∏–∫", "–ó–Ω–∞—á–µ–Ω–Ω—è"],
                                   ["–£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å", ""],
                                   ["–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", ""],
                                   ["–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", ""],
                                   ["–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∞—Ä–æ–º–∞—Ç", ""]])

# === –î–∞–Ω—ñ ===
perfumes = {
    "–ñ—ñ–Ω–æ—á—ñ": [
        {"name": "Chanel Chance", "photo": "https://example.com/chanel.jpg"},
        {"name": "Dior J'adore", "photo": "https://example.com/jadore.jpg"}
    ],
    "–ß–æ–ª–æ–≤—ñ—á—ñ": [
        {"name": "Dior Sauvage", "photo": "https://example.com/sauvage.jpg"},
        {"name": "Versace Eros", "photo": "https://example.com/eros.jpg"}
    ],
    "–£–Ω—ñ—Å–µ–∫—Å": [
        {"name": "Tom Ford Black Orchid", "photo": "https://example.com/ford.jpg"},
        {"name": "Creed Aventus", "photo": "https://example.com/aventus.jpg"}
    ]
}
perfume_prices = {p["name"]: 200 for cat in perfumes.values() for p in cat}

promotions = {
    "1+1=–ü–æ–¥–∞—Ä—É–Ω–æ–∫": {"description": "–ö—É–ø–∏ 2 ‚Äî —Ç—Ä–µ—Ç—ñ–π —É –ø–æ–¥–∞—Ä—É–Ω–æ–∫", "discount": 66.67},
    "–ü–∞—Ä—Ñ—É–º –¥–Ω—è": {"description": "-20 –≥—Ä–Ω –Ω–∞ –æ–±—Ä–∞–Ω–∏–π –∞—Ä–æ–º–∞—Ç", "discount": 20},
    "–ü–µ—Ä—à–∏–π –∫–ª—ñ—î–Ω—Ç": {"description": "10% –∑–Ω–∏–∂–∫–∞ –Ω–∞ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "discount": 20},
    "–¢–∞—î–º–Ω–µ —Å–ª–æ–≤–æ": {"description": "–ù–∞–∑–≤–∏ —Å–ª–æ–≤–æ '–ê–†–û–ú–ê–¢' ‚Äî –∑–Ω–∏–∂–∫–∞ 15 –≥—Ä–Ω", "discount": 15},
    "–ë–µ–∑ –∑–Ω–∏–∂–∫–∏": {"description": "–ë–µ–∑ –∞–∫—Ü—ñ–π", "discount": 0},
}

# === –ë–æ—Ç ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
user_data = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üì¶ –ü–∞—Ä—Ñ—É–º–∏", callback_data="show_perfumes"),
        InlineKeyboardButton("üî• –ê–∫—Ü—ñ—ó", callback_data="promotions")
    )
    kb.add(InlineKeyboardButton("üìù –ó–∞–º–æ–≤–∏—Ç–∏", callback_data="order"))
    await message.answer("üåø –í—ñ—Ç–∞—î–º–æ! –ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è —É –∫–æ–∂–Ω–æ–º—É –∞—Ä–æ–º–∞—Ç—ñ.", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "show_perfumes")
async def choose_category(call: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=2)
    for cat in perfumes:
        kb.add(InlineKeyboardButton(cat, callback_data=f"cat_{cat}"))
    kb.add(InlineKeyboardButton("–£—Å—ñ", callback_data="cat_all"))
    await call.message.answer("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def show_perfumes(call: types.CallbackQuery):
    category = call.data[4:]
    selected = sum(perfumes.values(), []) if category == "all" else perfumes[category]
    for p in selected:
        await call.message.answer_photo(photo=p["photo"], caption=f"{p['name']} ‚Äî 200 –≥—Ä–Ω")

@dp.callback_query_handler(lambda c: c.data == "promotions")
async def show_promotions(call: types.CallbackQuery):
    promo_text = "\n".join([f"- {k}: {v['description']}" for k, v in promotions.items() if k != "–ë–µ–∑ –∑–Ω–∏–∂–∫–∏"])
    delivery_note = f"üöö –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ {FREE_DELIVERY_THRESHOLD} –≥—Ä–Ω (—ñ–Ω–∞–∫—à–µ +{DELIVERY_COST} –≥—Ä–Ω)"
    await call.message.answer(f"üî• –ê–∫—Ü—ñ—ó –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n{promo_text}\n\n{delivery_note}")

@dp.callback_query_handler(lambda c: c.data == "order")
async def start_order(call: types.CallbackQuery):
    user_data[call.from_user.id] = {}
    kb = InlineKeyboardMarkup(row_width=2)
    for cat in perfumes.values():
        for p in cat:
            kb.add(InlineKeyboardButton(p['name'], callback_data=f"choose_{p['name']}"))
    await call.message.answer("–û–±–µ—Ä–∏ –∞—Ä–æ–º–∞—Ç:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("choose_"))
async def get_name(call: types.CallbackQuery):
    perfume_name = call.data[7:]
    user_data[call.from_user.id]["perfume"] = perfume_name
    await call.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")

@dp.message_handler(lambda m: "name" not in user_data.get(m.from_user.id, {}))
async def get_phone(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@dp.message_handler(lambda m: "phone" not in user_data.get(m.from_user.id, {}))
async def get_city(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ, –∫—É–¥–∏ –±—É–¥–µ –∑–¥—ñ–π—Å–Ω–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞:")

@dp.callback_query_handler(lambda c: c.data in ["delivery_address", "delivery_np"])
async def ask_for_address(call: types.CallbackQuery):
    method = "–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞" if call.data == "delivery_address" else "–ù–æ–≤–∞ –ü–æ—à—Ç–∞"
    user_data[call.from_user.id]["delivery_method"] = method
    note = "üìç –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:" if method == "–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞" else "üè§ –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–ü:"
    await call.message.answer(note + "‚ÄºÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É–≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º.")

@dp.message_handler(lambda m: "city" not in user_data.get(m.from_user.id, {}))
async def get_delivery_method(message: types.Message):
    user_data[message.from_user.id]["city"] = message.text
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data="np"),
        InlineKeyboardButton("‚úâÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞ –£–∫—Ä–ø–æ—à—Ç–∞", callback_data="ukr")
    )
    kb.add(InlineKeyboardButton("üè† –ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="address"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)




@dp.callback_query_handler(lambda c: c.data.startswith("promo_"))
async def confirm_order_prompt(call: types.CallbackQuery):
    uid = call.from_user.id
    promo_key = call.data[6:]
    user_data[uid]["promotion"] = promo_key
    data = user_data[uid]
    price = perfume_prices[data["perfume"]]
    quantity = data["quantity"]
    discount = promotions[promo_key]["discount"]
    subtotal = max(0, price * quantity - discount * quantity)
    delivery_fee = 0 if subtotal >= FREE_DELIVERY_THRESHOLD else DELIVERY_COST
    total = subtotal + delivery_fee
    address_full = f"–º. {data['city']}, " + (
        f"–ù–ü {data['address']}" if data['delivery_type'] == "np" else 
        f"–£–∫—Ä–ø–æ—à—Ç–∞ {data['address']}" if data['delivery_type'] == "ukr" else 
        f"{data['address']}" )
    order_summary = (
        f"üîç –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
"
        f"–ê—Ä–æ–º–∞—Ç: {data['perfume']}
"
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {quantity} —à—Ç
"
        f"–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é: {price} –≥—Ä–Ω
"
        f"–ê–∫—Ü—ñ—è: {promo_key} (-{discount} –≥—Ä–Ω/—à—Ç)
"
        f"–°—É–º–∞: {subtotal} –≥—Ä–Ω
"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {'–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞' if delivery_fee == 0 else f'{DELIVERY_COST} –≥—Ä–Ω'}
"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total} –≥—Ä–Ω
"
        f"–Ü–º'—è: {data['name']}
"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
"
        f"–ê–¥—Ä–µ—Å–∞: {address_full}"
    )
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –¢–∞–∫, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é", callback_data="confirm_final"),
        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")
    )
    await call.message.answer(order_summary + "

–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "confirm_final")
async def finalize_order(call: types.CallbackQuery):
    uid = call.from_user.id
    data = user_data[uid]
    price = perfume_prices[data["perfume"]]
    quantity = data["quantity"]
    discount = promotions[data["promotion"]]["discount"]
    subtotal = max(0, price * quantity - discount * quantity)
    delivery_fee = 0 if subtotal >= FREE_DELIVERY_THRESHOLD else DELIVERY_COST
    total = subtotal + delivery_fee
    profit = total - (COST_PRICE * quantity)

    sheet.append_row([
        data['name'], data['phone'], f"–º. {data['city']}, " + (
        f"–ù–ü {data['address']}" if data['delivery_type'] == "np" else 
        f"–£–∫—Ä–ø–æ—à—Ç–∞ {data['address']}" if data['delivery_type'] == "ukr" else 
        f"{data['address']}" ), data['perfume'], quantity,
        data['promotion'], total, profit, datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        uid, "", "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
    ])
    analytics_sheet.update("B2", f"=COUNTA({sheet.title}!A2:A)")
    analytics_sheet.update("B3", f"=SUM({sheet.title}!G2:G)")
    analytics_sheet.update("B4", f"=SUM({sheet.title}!H2:H)")
    analytics_sheet.update("B5", f"=INDEX({sheet.title}!D2:D, MODE(MATCH({sheet.title}!D2:D, {sheet.title}!D2:D, 0)))")

    await call.message.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –∞–±–æ SMS.")
    del user_data[uid]

@dp.callback_query_handler(lambda c: c.data == "cancel_order")
async def cancel_order(call: types.CallbackQuery):
    await call.message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /start")
    user_data.pop(call.from_user.id, None)

@dp.callback_query_handler(lambda c: c.data in ["np", "ukr", "address"])
async def get_final_address(call: types.CallbackQuery):
    delivery_type = call.data
    user_data[call.from_user.id]["delivery_type"] = delivery_type
    if delivery_type == "address":
        await call.message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏.‚ÄºÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É–≤–∞–∂–Ω–æ –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º!")
    else:
        label = "–ù–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:" if delivery_type == "np" else "–ù–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –£–∫—Ä–ø–æ—à—Ç–∏:"
        await call.message.answer(f"‚úçÔ∏è {label}‚ÄºÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —É–≤–∞–∂–Ω–æ –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º!")

@dp.message_handler(lambda m: "address" not in user_data.get(m.from_user.id, {}))
async def get_quantity(message: types.Message):
    user_data[message.from_user.id]["address"] = message.text
    await message.answer("–ö—ñ–ª—å–∫—ñ—Å—Ç—å (—à—Ç):")

@dp.message_handler(lambda m: "quantity" not in user_data.get(m.from_user.id, {}))
async def get_promotion(message: types.Message):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–ª–æ–º!")
        return
    user_data[message.from_user.id]["quantity"] = int(message.text)
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(promo, callback_data=f"promo_{promo}") for promo in promotions]
    for i in range(0, len(buttons), 2):
        kb.row(*buttons[i:i+2])
    await message.answer("–û–±–µ—Ä–∏ –∞–∫—Ü—ñ—é:", reply_markup=kb)



async def notify_sent_orders():
    while True:
        await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —â–æ—Ö–≤–∏–ª–∏–Ω–∏
        rows = sheet.get_all_values()
        header = rows[0]
        if "–ï–ù" in header:
            en_index = header.index("–ï–ù")
            chat_index = header.index("Chat ID")
            status_index = header.index("–°—Ç–∞—Ç—É—Å") if "–°—Ç–∞—Ç—É—Å" in header else None
            for i, row in enumerate(rows[1:], start=2):
                if len(row) > en_index and row[en_index] and (len(row) <= chat_index or not row[chat_index].startswith("‚úÖ")):
                    try:
                        chat_id = int(row[chat_index])
                        tn_number = row[en_index]
                        await bot.send_message(chat_id, f"üì¶ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                        sheet.update_cell(i, chat_index + 1, f"‚úÖ {tn_number}")
                    except Exception as e:
                        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(notify_sent_orders())
    executor.start_polling(dp, skip_updates=True, loop=loop)
