# main.py
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime
from html import escape as escape_md
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import asyncio

# ====== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ======
API_TOKEN = 'YOUR_BOT_TOKEN_HERE'

# Google Sheets –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
GS_CREDENTIALS_FILE = 'path_to_google_credentials.json'
GS_SPREADSHEET_NAME = 'YourGoogleSheetName'
GS_WORKSHEET_NAME = 'Orders'

# ====== –õ–æ–≥—É–≤–∞–Ω–Ω—è ======
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.MARKDOWN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ====== –ü–∞–º'—è—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø—Å–µ–≤–¥–æ-–±–∞–∑–∞) ======
user_carts = {}
user_discounts = {}

# ID —Ç–∞ —Ü—ñ–Ω–∞ –¥–ª—è "–ó–Ω–∏–∂–∫–∏ –¥–Ω—è"
DISCOUNT_DAY_ITEM_ID = 101
DISCOUNT_DAY_PRICE = 150

# ====== FSM –°—Ç–∞–Ω –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ======
class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_city = State()
    waiting_for_delivery_type = State()
    waiting_for_address = State()
    waiting_for_post_service = State()
    waiting_for_post_number = State()
    confirmation = State()

# ====== –ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º—ñ–≤ (–ø—Ä–∏–∫–ª–∞–¥) ======
catalog_items = [
    {'id': 1, 'name': '–ü–∞—Ä—Ñ—É–º–∏ A', 'price': 350},
    {'id': 2, 'name': '–ü–∞—Ä—Ñ—É–º–∏ B', 'price': 450},
    {'id': DISCOUNT_DAY_ITEM_ID, 'name': '–ü–∞—Ä—Ñ—É–º–∏ –∑—ñ –ó–Ω–∏–∂–∫–æ—é –¥–Ω—è', 'price': 200},
]

# ====== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ======
def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"),
        InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="cart"),
        InlineKeyboardButton("üî• –ó–Ω–∏–∂–∫–∞ –¥–Ω—è!", callback_data="discount_day"),
        InlineKeyboardButton("üéÅ –ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏", callback_data="promotions"),
    )
    return kb

def catalog_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    for item in catalog_items:
        kb.add(InlineKeyboardButton(f"{item['name']} ‚Äî {item['price']} –≥—Ä–Ω", callback_data=f"add_{item['id']}"))
    kb.add(InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home"))
    return kb

def cart_keyboard(user_id):
    kb = InlineKeyboardMarkup(row_width=3)
    items = user_carts.get(user_id, [])
    for i, item in enumerate(items):
        kb.add(
            InlineKeyboardButton("‚ûñ", callback_data=f"minus:{i}"),
            InlineKeyboardButton(f"{item['name']} x{item['qty']}", callback_data="noop"),
            InlineKeyboardButton("‚ûï", callback_data=f"plus:{i}")
        )
    kb.add(
        InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏", callback_data="checkout"),
        InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="clear_cart"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    )
    return kb

def promotions_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("1+1 –∑—ñ –∑–Ω–∏–∂–∫–æ—é 30% –Ω–∞ –¥—Ä—É–≥–∏–π —Ç–æ–≤–∞—Ä", callback_data="promo_1plus1"),
        InlineKeyboardButton("–ü–∞–∫–µ—Ç 4 –ø–∞—Ä—Ñ—É–º–∏ –∑–∞ 680 –≥—Ä–Ω", callback_data="promo_pack4"),
        InlineKeyboardButton("–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 600 –≥—Ä–Ω", callback_data="promo_free_delivery"),
        InlineKeyboardButton("–†–æ–∑—ñ–≥—Ä–∞—à —Å–µ—Ä–µ–¥ –Ω–æ–≤–∏—Ö –ø–æ–∫—É–ø—Ü—ñ–≤", callback_data="promo_raffle"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home"),
    )
    return kb

# ====== –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ callback ======
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=main_menu())

@dp.callback_query_handler(text="home")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("üëã –í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=main_menu())
    await callback.answer()

# --- –ö–∞—Ç–∞–ª–æ–≥ ---
@dp.callback_query_handler(text="catalog")
async def show_catalog(callback: types.CallbackQuery):
    await callback.message.edit_text("üõç –û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=catalog_keyboard())
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item_id = int(callback.data.split("_")[1])
    item = next((i for i in catalog_items if i['id'] == item_id), None)
    if item is None:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    cart = user_carts.setdefault(user_id, [])
    existing = next((x for x in cart if x['id'] == item_id), None)
    if existing:
        existing['qty'] += 1
    else:
        cart.append({'id': item['id'], 'name': item['name'], 'price': item['price'], 'qty': 1})

    await callback.answer(f"–î–æ–¥–∞–Ω–æ {item['name']} –¥–æ –∫–æ—à–∏–∫–∞")
    # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–∑ –∫–∞—Ç–∞–ª–æ–≥—É –∞–±–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫?
    await show_cart_callback(callback)

# --- –ö–æ—à–∏–∫ ---
async def show_cart_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    items = user_carts.get(user_id, [])

    if not items:
        await callback.message.edit_text("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
        await callback.answer()
        return

    text = "*–í–∞—à –∫–æ—à–∏–∫:*\n"
    total = 0
    discount = 0

    for item in items:
        price = item['price']
        # –ó–Ω–∏–∂–∫–∞ –¥–Ω—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–æ–≤–∞—Ä
        if item['id'] == DISCOUNT_DAY_ITEM_ID:
            price = DISCOUNT_DAY_PRICE
        line_price = price * item['qty']
        total += line_price
        text += f"- {item['name']} x{item['qty']} = {line_price} –≥—Ä–Ω\n"

    # –ê–∫—Ü—ñ—è: 20% –∑–Ω–∏–∂–∫–∞ –ø—Ä–∏ 5+ –æ–¥–∏–Ω–∏—Ü—å —É –∫–æ—à–∏–∫—É (–ø—Ä–∏–∫–ª–∞–¥)
    count_items = sum(item['qty'] for item in items)
    if count_items >= 5:
        discount = int(total * 0.2)
        text += "\nüéÅ *–ó–Ω–∏–∂–∫–∞ 20% –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞.*"

    final = total - discount
    text += f"\n\nüíµ *–°—É–º–∞:* {total} –≥—Ä–Ω\nüéÅ *–ó–Ω–∏–∂–∫–∞:* {discount} –≥—Ä–Ω\n‚úÖ *–î–æ —Å–ø–ª–∞—Ç–∏:* {final} –≥—Ä–Ω"

    await callback.message.edit_text(text, reply_markup=cart_keyboard(user_id))
    await callback.answer()

@dp.callback_query_handler(text="cart")
async def show_cart(callback: types.CallbackQuery):
    await show_cart_callback(callback)

@dp.callback_query_handler(lambda c: c.data.startswith("plus:") or c.data.startswith("minus:"))
async def change_quantity(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    index = int(callback.data.split(":")[1])
    cart = user_carts.get(user_id, [])
    if 0 <= index < len(cart):
        if callback.data.startswith("plus:"):
            cart[index]['qty'] += 1
        elif callback.data.startswith("minus:") and cart[index]['qty'] > 1:
            cart[index]['qty'] -= 1

    await show_cart_callback(callback)

@dp.callback_query_handler(text="clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_carts[user_id] = []
    await callback.message.edit_text("üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.", reply_markup=main_menu())
    await callback.answer()

@dp.callback_query_handler(text="checkout")
async def checkout_start(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not user_carts.get(user_id):
        await callback.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!", show_alert=True)
        return
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ü–Ü–ë:")
    await OrderStates.waiting_for_name.set()
    await callback.answer()

# --- –ó–Ω–∏–∂–∫–∞ –¥–Ω—è ---
@dp.callback_query_handler(text="discount_day")
async def show_discount_day(callback: types.CallbackQuery):
    # –í–∏–≤—ñ–¥ –∑–Ω–∏–∂–∫–∏ –¥–Ω—è (–ø—Ä–∏–∫–ª–∞–¥)
    item = next((i for i in catalog_items if i['id'] == DISCOUNT_DAY_ITEM_ID), None)
    if item is None:
        await callback.answer("–ü–æ–∑–∏—Ü—ñ—è –∑—ñ –∑–Ω–∏–∂–∫–æ—é –¥–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return
    text = (f"üî• *–ó–Ω–∏–∂–∫–∞ –¥–Ω—è!*\n\n"
            f"{item['name']}\n"
            f"–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {DISCOUNT_DAY_PRICE} –≥—Ä–Ω (–∑–≤–∏—á–∞–π–Ω–∞ {item['price']} –≥—Ä–Ω)\n\n"
            f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –¥–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞.")
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(f"–î–æ–¥–∞—Ç–∏ {item['name']}", callback_data=f"add_{item['id']}"))
    kb.add(InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home"))
    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()

# --- –ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏ ---
@dp.callback_query_handler(text="promotions")
async def show_promotions(callback: types.CallbackQuery):
    text = (
        "üéÅ *–ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏*\n\n"
        "1Ô∏è‚É£ 1+1 –∑—ñ –∑–Ω–∏–∂–∫–æ—é 30% –Ω–∞ –¥—Ä—É–≥–∏–π —Ç–æ–≤–∞—Ä\n"
        "2Ô∏è‚É£ –ü–∞–∫–µ—Ç–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è: 4 –ø–∞—Ä—Ñ—É–º–∏ –∑–∞ 680 –≥—Ä–Ω (—Ä—ñ–≤–Ω–æ 4 –æ–¥–∏–Ω–∏—Ü—ñ)\n"
        "3Ô∏è‚É£ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 600 –≥—Ä–Ω\n"
        "4Ô∏è‚É£ –†–æ–∑—ñ–≥—Ä–∞—à —Å–µ—Ä–µ–¥ –Ω–æ–≤–∏—Ö –ø–æ–∫—É–ø—Ü—ñ–≤\n\n"
        "–û–±–∏—Ä–∞–π—Ç–µ –∞–∫—Ü—ñ—é, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–¥—Ä–æ–±–∏—Ü—ñ."
    )
    await callback.message.edit_text(text, reply_markup=promotions_keyboard())
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("promo_"))
async def promo_details(callback: types.CallbackQuery):
    promo = callback.data[6:]
    text = ""
    if promo == "1plus1":
        text = (
            "1+1 –∑—ñ –∑–Ω–∏–∂–∫–æ—é 30% –Ω–∞ –¥—Ä—É–≥–∏–π —Ç–æ–≤–∞—Ä:\n"
            "- –ö—É–ø—É–π—Ç–µ 2 —Ç–æ–≤–∞—Ä–∏,\n"
            "- –î—Ä—É–≥–∏–π ‚Äî –∑—ñ –∑–Ω–∏–∂–∫–æ—é 30%\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –≤ –∫–æ—à–∏–∫—É."
        )
    elif promo == "pack4":
        text = (
            "–ü–∞–∫–µ—Ç–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è:\n"
            "- –†—ñ–≤–Ω–æ 4 –ø–∞—Ä—Ñ—É–º–∏ –∑–∞ 680 –≥—Ä–Ω.\n"
            "–ó–Ω–∏–∂–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ 4 –æ–¥–∏–Ω–∏—Ü—å."
        )
    elif promo == "free_delivery":
        text = (
            "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞:\n"
            "- –ü—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 600 –≥—Ä–Ω –¥–æ—Å—Ç–∞–≤–∫–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞."
        )
    elif promo == "raffle":
        text = (
            "–†–æ–∑—ñ–≥—Ä–∞—à —Å–µ—Ä–µ–¥ –Ω–æ–≤–∏—Ö –ø–æ–∫—É–ø—Ü—ñ–≤:\n"
            "- –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è —è–∫ –Ω–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç,\n"
            "- –û—Ç—Ä–∏–º–∞–π—Ç–µ —à–∞–Ω—Å –≤–∏–≥—Ä–∞—Ç–∏ –ø—Ä–∏–∑!"
        )
    else:
        text = "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–∫—Ü—ñ—é –≤—ñ–¥—Å—É—Ç–Ω—è."

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="promotions"),
        InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="home")
    )
    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()

# ====== FSM –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ======
@dp.message_handler(state=OrderStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await OrderStates.next()

@dp.message_handler(state=OrderStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ (–º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏)
    if not phone.replace("+", "").replace("-", "").isdigit():
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –º—ñ—Å—Ç–æ:")
    await OrderStates.next()

@dp.message_handler(state=OrderStates.waiting_for_city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery_address"),
        InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ —É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", callback_data="delivery_post")
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
    await OrderStates.next()

@dp.callback_query_handler(lambda c: c.data in ["delivery_address", "delivery_post"], state=OrderStates.waiting_for_delivery_type)
async def process_delivery_type(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "delivery_address":
        await state.update_data(delivery_type="address")
        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await OrderStates.waiting_for_address.set()
    else:
        await state.update_data(delivery_type="post")
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("–ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data="post_service_np"),
            InlineKeyboardButton("–£–∫—Ä–ø–æ—à—Ç–∞", callback_data="post_service_up")
        )
        await bot.send_message(callback.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—à—Ç–æ–≤—É —Å–ª—É–∂–±—É:", reply_markup=kb)
    await callback.answer()

@dp.message_handler(state=OrderStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await confirm_order(message, state)

@dp.callback_query_handler(lambda c: c.data in ["post_service_np", "post_service_up"], state=OrderStates.waiting_for_post_service)
async def process_post_service(callback: types.CallbackQuery, state: FSMContext):
    service = "–ù–æ–≤–∞ –ü–æ—à—Ç–∞" if callback.data == "post_service_np" else "–£–∫—Ä–ø–æ—à—Ç–∞"
    await state.update_data(post_service=service)
    await bot.send_message(callback.from_user.id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è {service}:")
    await OrderStates.waiting_for_post_number.set()
    await callback.answer()

@dp.message_handler(state=OrderStates.waiting_for_post_number)
async def process_post_number(message: types.Message, state: FSMContext):
    await state.update_data(post_number=message.text)
    await confirm_order(message, state)

async def confirm_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await message.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        await state.finish()
        return
text = f"üìù *–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n\n"
text += f"–Ü–º'—è: {escape_md(data.get('name',''))}\n"
text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {escape_md(data.get('phone',''))}\n"
text += f"–ú—ñ—Å—Ç–æ: {escape_md(data.get('city',''))}\n"
delivery_type = data.get('delivery_type')
if delivery_type == "address":
    text += f"–î–æ—Å—Ç–∞–≤–∫–∞: –ê–¥—Ä–µ—Å–Ω–∞\n–ê–¥—Ä–µ—Å–∞: {escape_md(data.get('address',''))}\n"
else:
    text += (f"–î–æ—Å—Ç–∞–≤–∫–∞: –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è\n"
             f"–°–ª—É–∂–±–∞: {escape_md(data.get('post_service',''))}\n"
             f"–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ: {escape_md(data.get('post_number',''))}\n")
text += "\n*–í–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:*\n"
total = 0
for item in cart:
    price = item['price']
    if item['id'] == DISCOUNT_DAY_ITEM_ID:
        price = DISCOUNT_DAY_PRICE
    line_price = price * item['qty']
    total += line_price
    text += f"- {item['name']} x{item['qty']} = {line_price} –≥—Ä–Ω\n"
text += f"\n*–í—Å—å–æ–≥–æ –¥–æ –æ–ø–ª–∞—Ç–∏:* {total} –≥—Ä–Ω\n\n"
text += "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ."

kb = InlineKeyboardMarkup()
kb.add(
    InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="order_confirm"),
    InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="order_cancel")
)
await message.answer(text, reply_markup=kb)
await OrderStates.confirmation.set()

@dp.callback_query_handler(text="order_cancel", state=OrderStates.confirmation)
async def order_cancel(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.finish()
    user_carts[callback.from_user.id] = []
    await callback.answer()
user_carts[callback.from_user.id] = []

@dp.callback_query_handler(text="order_confirm", state=OrderStates.confirmation)
async def order_confirm(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    cart = user_carts.get(user_id, [])
    await callback.answer("–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ.")
# –ó–∞–ø–∏—Å —É Google Sheets
    order_text = ""
    for item in cart:
        price = item['price']
        if item['id'] == DISCOUNT_DAY_ITEM_ID:
            price = DISCOUNT_DAY_PRICE
        order_text += f"{item['name']} x{item['qty']} ({price} –≥—Ä–Ω); "

row = [
    str(user_id),
    data.get('name', ''),
    data.get('phone', ''),
    data.get('city', ''),
    data.get('delivery_type', ''),
    data.get('address', '') if data.get('delivery_type') == 'address' else '',
    data.get('post_service', '') if data.get('delivery_type') == 'post' else '',
    data.get('post_number', '') if data.get('delivery_type') == 'post' else '',
    order_text.strip(),
    datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    ""  # –ø–æ–ª–µ –¥–ª—è –¢–¢–ù (–Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó), –±—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ –∞–¥–º—ñ–Ω–æ–º
]

success = await write_order_to_gs(row)
if success:
    await callback.message.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó (–¢–¢–ù).")
else:
    await callback.message.answer("‚ö† –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

user_carts[user_id] = []
await state.finish()

====== –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø–∏—Å—É –≤ Google Sheets ======
async def write_order_to_gs(row):
    loop = asyncio.get_event_loop()
    try:
        def gs_job():
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            creds = ServiceAccountCredentials.from_json_keyfile_name(GS_CREDENTIALS_FILE, scope)
            client = gspread.authorize(creds)
            sheet = client.open(GS_SPREADSHEET_NAME).worksheet(GS_WORKSHEET_NAME)
            sheet.append_row(row)
    await loop.run_in_executor(None, gs_job)
        return True
    except Exception as e:
        logging.error(f"GS error: {e}")
        return False

====== –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏–≤–∞—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ======

@dp.message_handler()
async def any_message(message: types.Message):
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=main_menu())
====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
if name == "main":
executor.start_polling(dp, skip_updates=True)

markdown
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
