import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from collections import Counter
from gspread.utils import rowcol_to_a1
from collections import defaultdict
import random
from aiogram.utils.markdown import escape_md  # ‚úÖ –î–æ–¥–∞–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏ Markdown

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = '7511346484:AAEm89gjBctt55ge8yEqrfHrxlJ-yS4d56U'
GOOGLE_SHEET_NAME = 'Parfums'
CREDENTIALS_FILE = 'credentials.json'
# === Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
workbook = client.open(GOOGLE_SHEET_NAME)
sheet = workbook.sheet1

sheet_header = [
    "–î–∞—Ç–∞", "–ß–∞—Å", "–Ü–º‚Äô—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ú—ñ—Å—Ç–æ", "–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", "–ê–¥—Ä–µ—Å–∞ / –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è",
    "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", "–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", "–ó–Ω–∏–∂–∫–∞", "–°—É–º–∏", "–û–ø–ª–∞—Ç–∞",
    "ID –∫–ª—ñ—î–Ω—Ç–∞", "–ù–æ–º–µ—Ä –¢–¢–ù", "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏"
]
if sheet.row_values(1) != sheet_header:
    sheet.update("A1", [sheet_header])


try:
    analytics_sheet = workbook.worksheet("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")
except:
    analytics_sheet = workbook.add_worksheet(title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", rows="10", cols="2")
    analytics_sheet.update("A1", [["–ü–æ–∫–∞–∑–Ω–∏–∫", "–ó–Ω–∞—á–µ–Ω–Ω—è"],
                                   ["–£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å", ""],
                                   ["–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", ""],
                                   ["–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", ""],
                                   ["–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∞—Ä–æ–º–∞—Ç", ""]])


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class OrderStates(StatesGroup):
    name = State()
    phone = State()
    city = State()
    delivery_type = State()
    post_service = State()
    address_or_post = State()
    confirmation = State()
  
user_carts = {}  # –°–ª–æ–≤–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —ó—Ö–Ω—ñ–º–∏ –∫–æ—à–∏–∫–∞–º–∏
user_discounts = {} 
@dp.message_handler(lambda message: message.text == "–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏" or message.text.lower() == "/how_to_order")
async def how_to_order(message: types.Message):
    instructions = (
        "üõç *–Ø–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n"
        "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ *–ö–∞—Ç–∞–ª–æ–≥* —ñ –æ–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ñ—É–º–∏\n"
        "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å *–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫*\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É *–ö–æ—à–∏–∫* —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å *–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n"
        "4Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñ (—ñ–º‚Äô—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –º—ñ—Å—Ç–æ, –¥–æ—Å—Ç–∞–≤–∫–∞)\n"
        "5Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî —ñ –º–∏ –≤—Å–µ –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!\n"
        "üßæ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –¢–¢–ù –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.\n"
    )
    await message.answer(instructions)

@dp.callback_query_handler(lambda c: c.data == "how_to_order")
async def how_to_order_callback(callback: types.CallbackQuery):
    instructions = (
        "üõç *–Ø–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n"
        "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ *–ö–∞—Ç–∞–ª–æ–≥* —ñ –æ–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ñ—É–º–∏\n"
        "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å *–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫*\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É *–ö–æ—à–∏–∫* —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å *–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n"
        "4Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñ (—ñ–º‚Äô—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –º—ñ—Å—Ç–æ, –¥–æ—Å—Ç–∞–≤–∫–∞)\n"
        "5Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî —ñ –º–∏ –≤—Å–µ –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!\n"
        "üßæ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –¢–¢–ù –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.\n"
    )
    await callback.message.answer(instructions)
    await callback.answer()



@dp.callback_query_handler(lambda c: c.data == "main_menu" or c.data == "start")
async def back_to_main(callback: types.CallbackQuery):
    await bot.send_photo(
    chat_id=callback.message.chat.id,
    photo="https://fleurparfum.net.ua/images/blog/shleifovie-duhi-woman.jpg.pagespeed.ce.3PKNQ9Vn2Z.jpg",  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    caption=(
        "üß¥ *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Å–≤—ñ—Ç—É!*\n\n"
        "üå∫ –£ –Ω–∞—Å –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—Ä–µ–Ω–¥–æ–≤—ñ –∂—ñ–Ω–æ—á—ñ, —á–æ–ª–æ–≤—ñ—á—ñ —Ç–∞ —É–Ω—ñ—Å–µ–∫—Å –ø–∞—Ä—Ñ—É–º–∏ ‚Äî –æ–±—Ä–∞–Ω—ñ –∑ –ª—é–±–æ–≤'—é.\n\n"
        "üí∏ –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —â–µ–¥—Ä—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n\n"
        "üéÅ –£—Å—ñ –æ—Ö–æ—á—ñ –º–æ–∂—É—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.\n\n"
        "üöö –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é/–£–∫—Ä–ø–æ—à—Ç–æ—é. –î–æ—Å—Ç–∞–≤–∫–∞ - –∑–∞ –Ω–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏ –≤–µ–ª–∏–∫–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.\n\n"
        "üëá –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó."
        ),
        reply_markup=main_menu,
    )
    await callback.answer()
  # –°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu_buttons = [
    [InlineKeyboardButton("üì¶–ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º", callback_data="catalog"), InlineKeyboardButton("üî•–ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏", callback_data="promotions")],
    [InlineKeyboardButton("üìâ–ó–Ω–∏–∂–∫–∞ –¥–Ω—è", callback_data="daily_discount")],
    [InlineKeyboardButton("‚ÑπÔ∏è–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?", callback_data="how_to_order")],
    [InlineKeyboardButton("‚úíÔ∏è–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/parfum_vibes"), InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart")]
]
main_menu = InlineKeyboardMarkup(inline_keyboard=main_menu_buttons)

# === –ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º—ñ–≤ ===
catalog_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton("üå∏–ñ—ñ–Ω–æ—á—ñ", callback_data="cat_women"), InlineKeyboardButton("ü••üçì–£–Ω—ñ—Å–µ–∫—Å", callback_data="cat_unisex")],
    [InlineKeyboardButton("üîùüí£–¢–æ–ø –ø—Ä–æ–¥–∞–∂", callback_data="cat_top")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
])

perfume_catalog = {
    "cat_women": [
        {"name": "Victoria`s Secret Bombshell Isle", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA.","quantity": 1},
        {"name": "Victoria`s Secret Compassion", "price": 200, "photo": "https://i.postimg.cc/c4y5cmzc/photo-2025-05-30-14-53-53-23.jpg.","quantity": 1},
        {"name": "Lattafa Yara Tous", "price": 200, "photo": "https://i.postimg.cc/7PQgNYQM/photo-2025-05-30-14-53-53-14.jpg.","quantity": 1},
        {"name": "Lattafa Yara Candy", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA.","quantity": 1},
        {"name": "Lattafa Haya", "price": 200, "photo": "https://i.postimg.cc/ydjHcG1W/photo-2025-05-30-14-53-46-3.jpg.","quantity": 1},
        {"name": "Lattafa Noble Blush", "price": 200, "photo": "https://i.postimg.cc/qMyxMHjs/photo-2025-05-30-14-53-53-16.jpg.","quantity": 1},
        {"name": "Lattafa Eclaire", "price": 200, "photo": "https://i.postimg.cc/W4F3TT7j/photo-2025-05-30-14-53-53-18.jpg.","quantity": 1},
        {"name": "Chanel Chance eau Fraiche", "price": 200, "photo": "https://i.postimg.cc/jj5xvK1P/photo-2025-05-30-14-53-53-5.jpg.jpg","quantity": 1},
        {"name": "Chanel Chance eau Tendre", "price": 200, "photo": "https://i.postimg.cc/q7nmP6WT/photo-2025-05-30-14-53-53-10.jpg.","quantity": 1},
        {"name": "Giorgio Armani Si Passione", "price": 200, "photo": "https://i.postimg.cc/pVBSV8rV/photo-2025-05-30-14-53-53-9.jpg.","quantity": 1},
        {"name": "Giorgio Armani My Way Nectar", "price": 200, "photo": "https://i.postimg.cc/L5z2hsqK/photo-2025-05-30-14-53-53-6.jpg.","quantity": 1},
        {"name": "Yves Saint Laurent Black Opium", "price": 200, "photo": "https://i.postimg.cc/pL3zMGt9/photo-2025-05-30-14-53-53-2.jpg.","quantity": 1},
        {"name": "Yves Saint Laurent Libre", "price": 200, "https://i.postimg.cc/fRWDTDDp/photo-2025-05-30-14-53-53-7.jpg.","quantity": 1},
        {"name": "Yves Saint Laurent Mon Paris", "price": 200, "photo": "https://i.postimg.cc/3x8xq2qs/photo-2025-05-30-14-53-43-5.jpg.","quantity": 1},
        {"name": "Haute Fragrance Company Wear Love Everywhere", "price": 200, "photo": "https://i.postimg.cc/WbQQFVGX/photo-2025-05-30-14-53-46-5.jpg.","quantity": 1},
        {"name": "Haute Fragrance Company Devil`s Intrigue", "price": 200, "photo": "https://i.postimg.cc/9MLyKWX2/photo-2025-05-30-14-53-53-13.jpg.","quantity": 1},
        {"name": "Carolina Herrera Good Girl Blush", "price": 200, "photo": "https://i.postimg.cc/902DFKxM/photo-2025-05-30-14-53-45-5.jpg.","quantity": 1},
        {"name": "Carolina Herrera Good Girl Velvet Fatale", "price": 200, "photo": "https://i.postimg.cc/N0zrgycN/photo-2025-05-30-14-53-43-2.jpg.","quantity": 1},
        {"name": "Montale Roses Musk", "price": 200, "photo": "https://i.postimg.cc/vBby1ydp/photo-2025-05-30-14-53-46-2.jpg.","quantity": 1},
        {"name": "Montale Fruity", "price": 200, "photo": "https://i.postimg.cc/3RVy5WGg/photo-2025-05-30-14-53-43-3.jpg.","quantity": 1},
        {"name": "Escada Candy Love", "price": 200, "photo": "https://i.postimg.cc/XvV8z1Kw/photo-2025-05-30-14-53-53-21.jpg.","quantity": 1},
        {"name": "Escada Sorbetto Rosso", "price": 200, "photo": "https://i.postimg.cc/bJZFmF8m/photo-2025-05-30-14-53-53-22.jpg.","quantity": 1},
        {"name": "Dolce & Gabbana Anthology l`Imperatrice 3", "price": 200, "photo": "https://i.postimg.cc/pdGD1WLH/photo-2025-05-30-14-53-53-17.jpg.","quantity": 1},
        {"name": "Ariana Grande Cloud Pink", "price": 200, "photo": "https://i.postimg.cc/sfPc9rCT/photo-2025-05-30-14-53-47-8.jpg.","quantity": 1},
        {"name": "Attar Collection Crystal Love for her", "price": 200, "photo": "https://i.postimg.cc/bJ0qwJSX/photo-2025-05-30-14-53-53-20.jpg.","quantity": 1},
        {"name": "Cacharel Amor Amor", "price": 200, "photo": "https://i.postimg.cc/mr0wVZr5/photo-2025-05-30-14-53-47-7.jpg.","quantity": 1},
        {"name": "Elizabeth Arden White Tea", "price": 200, "photo": "https://i.postimg.cc/1tfkV3j7/photo-2025-05-30-14-53-47-5.jpg.","quantity": 1},
        {"name": "Labcome La Vie Est Belle", "price": 200, "photo": "https://i.postimg.cc/QdT0RWWq/photo-2025-05-30-14-53-44-6.jpg.","quantity": 1},
        {"name": "Gritti Tutu", "price": 200, "photo": "https://i.postimg.cc/x1J4n4BM/photo-2025-05-30-14-53-44-4.jpg.","quantity": 1},
        {"name": "Versace Bright Crystal", "price": 200, "photo": "https://i.postimg.cc/zXtT0DtF/photo-2025-05-30-14-53-48.jpg.","quantity": 1},
        {"name": "Chloe Nomade", "price": 200, "photo": "https://i.postimg.cc/HkYP7LJ0/photo-2025-05-30-14-53-47-6.jpg.","quantity": 1},
        {"name": "Billie Eilish Eilish", "price": 200, "photo": "https://i.postimg.cc/Y2RV3g1G/photo-2025-05-30-14-53-44-3.jpg.","quantity": 1},
        {"name": "Jean Paul Gaultier Scandal", "price": 200, "photo": "https://i.postimg.cc/P5WFCwr5/photo-2025-05-30-14-53-47-2.jpg.","quantity": 1},
        {"name": "Christian Dior Miss Dior Cherie Blooming Boquet", "price": 200, "photo": "https://i.postimg.cc/xddqXLyv/photo-2025-05-30-14-53-43-4.jpg.","quantity": 1},
        {"name": "Prada Paradoxe", "price": 200, "photo": "https://i.postimg.cc/7bvm6xFz/photo-2025-05-30-14-53-47-3.jpg.","quantity": 1},
        {"name": "Moschino Toy 2", "price": 200, "photo": "https://i.postimg.cc/4dkdBjR5/photo-2025-05-30-14-53-45.jpg.","quantity": 1},
        {"name": "By Kajal Dahab", "price": 200, "photo": "https://i.postimg.cc/26bQBsF7/photo-2025-05-30-14-53-45-2.jpg.","quantity": 1},
        {"name": "Givenchy Ange ou Demon Le Secret", "price": 200, "photo": "https://i.postimg.cc/MpwJ3xnX/photo-2025-05-30-14-53-47-4.jpg.","quantity": 1}
],
    "cat_unisex": 
 [
        {"name": "RicHard White Chocola", "price": 200, "photo": "https://i.postimg.cc/T1Wh0GpC/photo-2025-05-30-14-53-53-15.jpg.","quantity": 1},
        {"name": "Montale Starry Nights", "price": 200, "photo": "https://i.postimg.cc/KzSPB9qX/photo-2025-05-30-14-53-47.jpg.","quantity": 1},
        {"name": "Montale Intense Cafe", "price": 200, "photo": "https://i.postimg.cc/zv8sfFT5/photo-2025-05-30-14-53-43.jpg.","quantity": 1},
        {"name": "Montale  Chocolate Greedy", "price": 200, "photo": "https://i.postimg.cc/Bnn1FWJP/photo-2025-05-30-14-53-45-4.jpg.","quantity": 1},
        {"name": "Attar Collection Azalea", "price": 200, "photo": "https://i.postimg.cc/ZnZK83zK/photo-2025-05-30-14-53-53-19.jpgs.","quantity": 1},
        {"name": "Attar Collection Hayati", "price": 200, "photo": "https://i.postimg.cc/qv6QKCJ3/photo-2025-05-30-14-53-53-11.jpg.","quantity": 1},
        {"name": "Attar Collection Al Rayhan", "price": 200, "photo": "https://i.postimg.cc/9FKYcFdF/photo-2025-05-30-14-53-53-12.jpg.","quantity": 1},
        {"name": "Tom Ford Cherry Smoke", "price": 200, "photo": "https://i.postimg.cc/d14bLT6y/photo-2025-05-30-14-53-46-4.jpg.","quantity": 1},
        {"name": "Tom Ford Lost Cherry", "price": 200, "photo": "https://i.postimg.cc/rFQ7jW2Z/photo-2025-05-30-14-53-53-8.jpg.","quantity": 1},
        {"name": "Marc-Antoine Barrois Tilia","price": 200, "photo": "https://i.postimg.cc/ZnNxXGW5/photo-2025-05-30-14-53-44.jpg.","quantity": 1},
        {"name": "Kilian Apple Brandy on the Rocks", "price": 200, "photo": "https://i.postimg.cc/kgzLSmWT/photo-2025-05-30-14-53-44-2.jpg.","quantity": 1},
        {"name": "Kilian Angel`s Share", "price": 200, "photo": "https://i.postimg.cc/jS3tkmPf/photo-2025-05-30-14-53-43-6.jpg.","quantity": 1},
        {"name": "Tiziana Terenzi Cassiopea", "price": 200, "photo": "https://i.postimg.cc/8ckrmxLY/photo-2025-05-30-14-53-53-3.jpg.","quantity": 1},
        {"name": "Escentric Molecules Molecule 02", "price": 200, "photo": "https://i.postimg.cc/s2Xn20B3/photo-2025-05-30-14-53-53.jpg.","quantity": 1},
        {"name": "Zarkoperfume Pink Molecule 090.09", "price": 200, "photo": "https://i.postimg.cc/nV6XzsP5/photo-2025-05-30-14-53-53-4.jpg.","quantity": 1},
        {"name": "Maison Francis Kurkdjian Baccarat Rouge 540", "price": 200, "photo": "https://i.postimg.cc/KzFq7vjD/photo-2025-05-30-14-53-44-5.jpg.","quantity": 1},
        {"name": "Maison Francis Kurkdjian 724", "price": 200, "photo": "https://i.postimg.cc/DZ9qQxxk/photo-2025-05-30-14-53-45-3.jpg.","quantity": 1}
                

],
    "cat_top": [
        {"name": "Creed Aventus", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA.","quantity": 1},
        {"name": "Chanel Coco Mademoiselle", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA.","quantity": 1},
        {"name": "Chanel Coco Mademoiselle", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA.","quantity": 1},
        {"name": "Chanel Coco Mademoiselle", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA.","quantity": 1},
        {"name": "Chanel Coco Mademoiselle", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA.","quantity": 1},
        {"name": "Chanel Coco Mademoiselle", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA.","quantity": 1},
        {"name": "Chanel Coco Mademoiselle", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA.","quantity": 1},
        {"name": "Maison Francis Kurkdjian Baccarat Rouge", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA.","quantity": 1}
    ]
}
@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def handle_category(callback: types.CallbackQuery):
    perfumes = perfume_catalog.get(callback.data, [])
    for i in range(0, len(perfumes), 2):
        row = perfumes[i:i+2]
        media = []
        buttons = []
        for p in row:
            text = f"*{p['name']}*\nüí∏ {p['price']} –≥—Ä–Ω"
            media.append((p['photo'], text))
            buttons.append(InlineKeyboardButton(f"‚ûï {p['name']}", callback_data=f"add_{p['name']}"))
        for m in media:
            await bot.send_photo(callback.from_user.id, m[0], caption=m[1])
        await bot.send_message(callback.from_user.id, "–û–±–µ—Ä—ñ—Ç—å:", reply_markup=InlineKeyboardMarkup(row_width=2).add(*buttons).add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
            InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")
        ))
    await callback.answer()
@dp.callback_query_handler(lambda c: c.data == "catalog")
async def show_catalog(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∞—Ä—Ñ—É–º—ñ–≤:", reply_markup=catalog_menu)
# –ó–Ω–∏–∂–∫–∞ –¥–Ω—è
daily_discount = {}
last_discount_update = None

def generate_daily_discount():
    global daily_discount, last_discount_update
    all_perfumes = sum(perfume_catalog.values(), [])
    daily_discount = random.choice(all_perfumes)
    last_discount_update = datetime.now().date()

@dp.message_handler(lambda message: message.text == "–ó–Ω–∏–∂–∫–∞ –¥–Ω—è")
async def daily_discount_text_handler(message: types.Message):
    global daily_discount, last_discount_update
    if daily_discount == {} or last_discount_update != datetime.now().date():
        generate_daily_discount()
    p = daily_discount
    discounted_price = int(p['price'] * 0.85)
    caption = (
        f"*–ó–Ω–∏–∂–∫–∞ –¥–Ω—è!*\n\n"
        f"–°—å–æ–≥–æ–¥–Ω—ñ —É –Ω–∞—Å –∞–∫—Ü—ñ—è –Ω–∞:\n"
        f"*{p['name']}*\n"
        f"üí∏ –ó–∞–º—ñ—Å—Ç—å {p['price']} –≥—Ä–Ω ‚Äî –ª–∏—à–µ {discounted_price} –≥—Ä–Ω!\n\n"
        f"–í—Å—Ç–∏–≥–Ω—ñ—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é!"
    )
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é", callback_data=f"discount_{p['name']}")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await message.answer_photo(photo=p['photo'], caption=caption, reply_markup=buttons)

@dp.callback_query_handler(lambda c: c.data == "daily_discount")
async def daily_discount_callback_handler(callback: types.CallbackQuery):
    global daily_discount, last_discount_update
    if daily_discount == {} or last_discount_update != datetime.now().date():
        generate_daily_discount()
    p = daily_discount
    discounted_price = int(p['price'] * 0.85)
    caption = (
        f"*–ó–Ω–∏–∂–∫–∞ –¥–Ω—è!*\n\n"
        f"–°—å–æ–≥–æ–¥–Ω—ñ —É –Ω–∞—Å –∞–∫—Ü—ñ—è –Ω–∞:\n"
        f"*{p['name']}*\n"
        f"üí∏ –ó–∞–º—ñ—Å—Ç—å {p['price']} –≥—Ä–Ω ‚Äî –ª–∏—à–µ {discounted_price} –≥—Ä–Ω!\n\n"
        f"–í—Å—Ç–∏–≥–Ω—ñ—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é!"
    )
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é", callback_data=f"discount_{p['name']}")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await callback.message.answer_photo(photo=p['photo'], caption=caption, reply_markup=buttons)
    await callback.answer()
@dp.callback_query_handler(lambda c: c.data.startswith("discount_"))
async def add_discount_to_cart(callback: types.CallbackQuery):
    name = callback.data.replace("discount_", "")
    user_id = callback.from_user.id
    all_perfumes = sum(perfume_catalog.values(), [])
    perfume = next((p for p in all_perfumes if p["name"] == name), None)
    if not perfume:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    discounted_price = int(perfume["price"] * 0.85)
    user_carts.setdefault(user_id, []).append({"name": name + " (–∑—ñ –∑–Ω–∏–∂–∫–æ—é)", "price": discounted_price, "quantity": 1})
    await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é!")

# –ë–ª–æ–∫: –ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏
@dp.callback_query_handler(lambda c: c.data == "promotions")
async def promotions_callback(callback: types.CallbackQuery):
    promo_text = (
        "üéâ *–ù–∞—è–≤–Ω—ñ –∞–∫—Ü—ñ—ó:*\n"
        "1Ô∏è‚É£ *3-–π –ø–∞—Ä—Ñ—É–º –∑—ñ –∑–Ω–∏–∂–∫–æ—é -50%*\n"
        "–ö—É–ø—ñ—Ç—å 2 –±—É–¥—å-—è–∫—ñ –ø–∞—Ä—Ñ—É–º–∏ ‚Äî —Ç—Ä–µ—Ç—ñ–π –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∑—ñ –∑–Ω–∏–∂–∫–æ—é 50%\n\n"
        "2Ô∏è‚É£ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 600 –≥—Ä–Ω*\n"
        "–û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É –≤—ñ–¥ 600 –≥—Ä–Ω (–±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏) ‚Äî –º–∏ –¥–æ—Å—Ç–∞–≤–∏–º–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ!\n\n"
        "3Ô∏è‚É£ *1+1 –∑—ñ –∑–Ω–∏–∂–∫–æ—é 30% –Ω–∞ –¥—Ä—É–≥–∏–π —Ç–æ–≤–∞—Ä*\n"
        "–ö—É–ø—É–π—Ç–µ –æ–¥–∏–Ω –ø–∞—Ä—Ñ—É–º, –¥—Ä—É–≥–∏–π –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∑—ñ –∑–Ω–∏–∂–∫–æ—é 30%\n\n"
        "4Ô∏è‚É£ *–ü–∞–∫–µ—Ç–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è: 4 –ø–∞—Ä—Ñ—É–º–∏ –∑–∞ 680 –≥—Ä–Ω*\n"
        "–ê–∫—Ü—ñ—è –¥—ñ—î –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ —Ä—ñ–≤–Ω–æ 4 –æ–¥–∏–Ω–∏—Ü—å.\n\n"
        "5Ô∏è‚É£ *–ó–Ω–∏–∂–∫–∞ 20% –≤—ñ–¥ 5 –æ–¥–∏–Ω–∏—Ü—å*\n"
        "–ü—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 5 –æ–¥–∏–Ω–∏—Ü—å ‚Äî –∑–Ω–∏–∂–∫–∞ 20% –Ω–∞ –∫–æ–∂–µ–Ω –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ–≤–∞—Ä.\n\n"
        "6Ô∏è‚É£ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ 2 —à—Ç*\n"
        "–ê–∫—Ü—ñ—è –Ω–µ —Å—É–º—É—î—Ç—å—Å—è –∑ —ñ–Ω—à–∏–º–∏ –∑–Ω–∏–∂–∫–∞–º–∏.\n\n"
        "7Ô∏è‚É£ *–†–æ–∑—ñ–≥—Ä–∞—à —Å–µ—Ä–µ–¥ –Ω–æ–≤–∏—Ö –ø–æ–∫—É–ø—Ü—ñ–≤*\n"
        "–ü—Ä–∏–π–º–∞–π—Ç–µ —É—á–∞—Å—Ç—å —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞–π—Ç–µ –ø—Ä–∏–∑–∏!\n"
    )

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ 3-–π –ø–∞—Ä—Ñ—É–º", callback_data="promo_cond_1"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—ó –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="promo_cond_2"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ 1+1 –∑—ñ –∑–Ω–∏–∂–∫–æ—é", callback_data="promo_cond_3"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ –ø–∞–∫–µ—Ç–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó", callback_data="promo_cond_4"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ –∑–Ω–∏–∂–∫–∏ –≤—ñ–¥ 5 –æ–¥–∏–Ω–∏—Ü—å", callback_data="promo_cond_5"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—ó –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="promo_cond_6"),
        InlineKeyboardButton("üì¶ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="main_menu")
    )

    await callback.message.answer(promo_text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("promo_cond_"))
async def promo_conditions(call: types.CallbackQuery):
    conditions = {
        "promo_cond_1": "üéâ *3-–π –ø–∞—Ä—Ñ—É–º –∑—ñ –∑–Ω–∏–∂–∫–æ—é -50%*\n–ö—É–ø—ñ—Ç—å –±—É–¥—å-—è–∫—ñ 2 –ø–∞—Ä—Ñ—É–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ —Ç—Ä–µ—Ç—ñ–π –∑—ñ –∑–Ω–∏–∂–∫–æ—é 50%.\n–ó–Ω–∏–∂–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –Ω–∞–π–º–µ–Ω—à–æ–≥–æ –∑–∞ —Ü—ñ–Ω–æ—é —Ç–æ–≤–∞—Ä—É. –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –≤ –æ–±–ª—ñ–∫.",
        "promo_cond_2": "üöö *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 600 –≥—Ä–Ω*\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏ –º–∞—î –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 600 –≥—Ä–Ω.",
        "promo_cond_3": "üõç *1+1 –∑—ñ –∑–Ω–∏–∂–∫–æ—é 30%*\n–ö—É–ø—É–π—Ç–µ –æ–¥–∏–Ω –ø–∞—Ä—Ñ—É–º, –¥—Ä—É–≥–∏–π –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∑—ñ –∑–Ω–∏–∂–∫–æ—é 30%.",
        "promo_cond_4": "üéÅ *–ü–∞–∫–µ—Ç–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è: 4 –ø–∞—Ä—Ñ—É–º–∏ –∑–∞ 680 –≥—Ä–Ω*\n–ê–∫—Ü—ñ—è –¥—ñ—î –ø—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ —Ä—ñ–≤–Ω–æ 4 –æ–¥–∏–Ω–∏—Ü—å.",
        "promo_cond_5": "üîü *–ó–Ω–∏–∂–∫–∞ 20% –≤—ñ–¥ 5 –æ–¥–∏–Ω–∏—Ü—å*\n–ü—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ –≤—ñ–¥ 5 –æ–¥–∏–Ω–∏—Ü—å ‚Äî –∑–Ω–∏–∂–∫–∞ 20% –Ω–∞ –∫–æ–∂–µ–Ω –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ–≤–∞—Ä.",
        "promo_cond_6": "üéâ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ 2 —à—Ç*\n–ê–∫—Ü—ñ—è –Ω–µ —Å—É–º—É—î—Ç—å—Å—è –∑ —ñ–Ω—à–∏–º–∏ –∑–Ω–∏–∂–∫–∞–º–∏."
    }
    await call.message.answer(conditions[call.data])
    await call.answer()


def calculate_cart(cart):
    # –ü–æ–¥—ñ–ª –Ω–∞ —Ç–æ–≤–∞—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é –¥–Ω—è —Ç–∞ –∑–≤–∏—á–∞–π–Ω—ñ
    discount_items = [item for item in cart if "(–∑—ñ –∑–Ω–∏–∂–∫–æ—é)" in item["name"]]
    normal_items = [item for item in cart if "(–∑—ñ –∑–Ω–∏–∂–∫–æ—é)" not in item["name"]]

    def summarize(items):
        counts = defaultdict(int)
        prices = {}
        for item in items:
            counts[item['name']] += item.get('quantity', 1)
            prices[item['name']] = item['price']
        summary = []
        for name, count in counts.items():
            summary.append({
                'name': name,
                'quantity': count,
                'price': prices[name]
            })
        return summary

    normal_summary = summarize(normal_items)
    discount_summary = summarize(discount_items)
    full_summary = normal_summary + discount_summary

    total_price_normal = sum(i['price'] * i['quantity'] for i in normal_summary)
    total_price_discount = sum(i['price'] * i['quantity'] for i in discount_summary)
    day_discount_amount = 0

    # === –ê–∫—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ –Ω–∞ –∑–≤–∏—á–∞–π–Ω—ñ —Ç–æ–≤–∞—Ä–∏ ===
    normal_total_items = sum(i['quantity'] for i in normal_summary)

    # 1. -50% –Ω–∞ 3-–π
    discount_3rd = 0
    if normal_total_items >= 3:
        all_prices = []
        for item in normal_summary:
            all_prices.extend([item['price']] * item['quantity'])
        all_prices.sort()
        discount_3rd = all_prices[2] * 0.5

    # 2. –ü–∞–∫–µ—Ç 4 –∑–∞ 680
    package_discount = 0
    if normal_total_items == 4:
        if total_price_normal > 680:
            package_discount = total_price_normal - 680

    # 3. 20% –≤—ñ–¥ 5 –æ–¥.
    discount_20 = 0
    if normal_total_items >= 5:
        discount_20 = total_price_normal * 0.2

    # 4. 1+1 -30% (–ø–µ—Ä–µ—Ä–æ–±–ª–µ–Ω–æ –Ω–∞ –±—É–¥—å-—è–∫—ñ —Ç–æ–≤–∞—Ä–∏)
    discount_bogo = 0
    all_unit_prices = []
    for item in normal_summary:
        all_unit_prices.extend([item['price']] * item['quantity'])
    all_unit_prices.sort()
    discount_bogo = sum(price * 0.3 for price in all_unit_prices[1::2])

    best_discount = max(discount_3rd, package_discount, discount_20, discount_bogo)

    final_normal_price = total_price_normal - best_discount
    final_total_price = final_normal_price + total_price_discount


    # –î–æ—Å—Ç–∞–≤–∫–∞
    free_shipping = final_total_price >= 600

    return {
        'cart': full_summary,
        'total_price': final_total_price,
        'total_discount': round(best_discount, 2),
        'day_discount_amount': round(total_price_discount * (1/0.85 * 0.15), 2),  # —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –µ–∫–æ–Ω–æ–º—ñ—é
        'free_shipping': free_shipping
    }
@dp.callback_query_handler(lambda c: c.data.startswith("add_"))
async def add_to_cart_callback(callback: types.CallbackQuery):
    perfume_name = callback.data[4:]
    user_id = callback.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = []
       # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–≤–∞—Ä –≤–∂–µ –≤ –∫–æ—à–∏–∫—É
    for item in user_carts[user_id]:
        if item["name"] == perfume_name:
            item["quantity"] += 1
            break
    else:
        # –Ø–∫—â–æ —Ç–æ–≤–∞—Ä—É –Ω–µ–º–∞ ‚Äî –¥–æ–¥–∞—î–º–æ –∑ quantity=1
        user_carts[user_id].append({"name": perfume_name, "price": 200,"quantity": 1})
        print(f"User {callback.from_user.id} clicked show_cart")
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton("üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="show_cart"),
            InlineKeyboardButton("üßæ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout")
        ],
        [
            InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="catalog"),
            InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    await callback.message.answer(f"‚úÖ {perfume_name} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞.", reply_markup=buttons)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "show_cart")
async def show_cart_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await callback.message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="main_menu")]]
            )
        )
        await callback.answer()
        return

    result = calculate_cart(cart)

    text = "*–í–∞—à –∫–æ—à–∏–∫:*\n"
    for i, item in enumerate(result["cart"], 1):
        text += f"{i}. {item['name']} ‚Äî {item['quantity']} —à—Ç. x {item['price']} –≥—Ä–Ω = {item['quantity'] * item['price']} –≥—Ä–Ω\n"

    text += f"\nüíµ –°—É–º–∞ –±–µ–∑ –∑–Ω–∏–∂–æ–∫: {sum(i['price'] * i['quantity'] for i in result['cart'])} –≥—Ä–Ω\n"
    if result['day_discount_amount'] > 0:
        text += f"üéâ –ó–Ω–∏–∂–∫–∞ –¥–Ω—è: {result['day_discount_amount']} –≥—Ä–Ω\n"
    text += f"üéÅ –ó–∞–≥–∞–ª—å–Ω–∞ –∑–Ω–∏–∂–∫–∞: {result['total_discount']} –≥—Ä–Ω\n"
    text += f"‚úÖ –î–æ —Å–ø–ª–∞—Ç–∏: {round(result['total_price'])} –≥—Ä–Ω\n"
    if result['free_shipping']:
        text += "üöö –£ –≤–∞—Å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞!\n"

    buttons = InlineKeyboardMarkup(row_width=2)
    for item in result['cart']:
        buttons.add(
            InlineKeyboardButton(f"‚ûï {item['name']}", callback_data=f"increase_{item['name']}"),
            InlineKeyboardButton(f"‚ûñ {item['name']}", callback_data=f"decrease_{item['name']}")
        )
    buttons.add(
        InlineKeyboardButton("üßæ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout"),
        InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart"),
        InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="catalog"),
    )

    await callback.message.answer(text, reply_markup=buttons)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("increase_"))
async def increase_item_quantity(callback: types.CallbackQuery):
    name = callback.data.replace("increase_", "")
    user_id = callback.from_user.id
    cart = user_carts.setdefault(user_id, [])
    for item in cart:
        if item["name"] == name:
            item["quantity"] += 1
            break
    else:
        cart.append({"name": name, "price": 200, "quantity": 1})  # –∞–±–æ –¥—ñ–∑–Ω–∞–π—Å—è —Å–ø—Ä–∞–≤–∂–Ω—é —Ü—ñ–Ω—É
    await show_cart_callback(callback)
  
@dp.callback_query_handler(lambda c: c.data.startswith("decrease_"))
async def decrease_item_quantity(callback: types.CallbackQuery):
    name = callback.data.replace("decrease_", "")
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, [])
    for i, item in enumerate(cart):
        if item["name"] == name:
            item["quantity"] -= 1
            if item["quantity"] <= 0:
                cart.pop(i)
            break
    await show_cart_callback(callback)

@dp.callback_query_handler(lambda c: c.data == "clear_cart")
async def clear_cart_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_carts[user_id] = []
    await callback.message.answer("üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "checkout")
async def checkout_handler(callback: types.CallbackQuery):
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *–ü–Ü–ë* –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]]))
    await OrderStates.name.set()
    await callback.answer()


@dp.message_handler(lambda message: message.text.lower().startswith("–¥–æ–¥–∞—Ç–∏ "))
async def add_to_cart(message: types.Message):
    user_id = message.from_user.id
    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –î–æ–¥–∞—Ç–∏ –ù–∞–∑–≤–∞ –¶—ñ–Ω–∞")
        return
    name = parts[1]
    try:
        price = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return

    if user_id not in user_carts:
        user_carts[user_id] = []
    user_carts[user_id].append({"name": name, "price": price})
    await message.answer(f"‚úÖ {name} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞ –∑–∞ {price} –≥—Ä–Ω.")

# –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫
@dp.message_handler(commands=["–∫–æ—à–∏–∫", "cart"])
async def view_cart(message: types.Message):
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü—ñ—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é show_cart_callback –∑ —Ñ–µ–π–∫–æ–≤–∏–º callback
    class DummyCallback:
        def __init__(self, user_id, message):
            self.from_user = types.User(id=user_id, is_bot=False, first_name="User")
            self.message = message
            self.data = "show_cart"
    await show_cart_callback(DummyCallback(message.from_user.id, message))

# –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫
@dp.message_handler(commands=["–æ—á–∏—Å—Ç–∏—Ç–∏", "clear"])
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    user_carts[user_id] = []
    await message.answer("üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")

# –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä —ñ–∑ –∫–æ—à–∏–∫–∞
@dp.message_handler(lambda message: message.text.lower().startswith("–≤–∏–¥–∞–ª–∏—Ç–∏ "))
async def remove_from_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    try:
        index = int(message.text.split()[1]) - 1
        if 0 <= index < len(cart):
            removed = cart.pop(index)
            await message.answer(f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: {removed['name']}")
        else:
            await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É.")
    except (IndexError, ValueError):
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –í–∏–¥–∞–ª–∏—Ç–∏ 1")

# === –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ===
@dp.callback_query_handler(lambda c: c.data == "main_menu", state="*")
async def fsm_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await back_to_main(callback)

@dp.message_handler(state=OrderStates.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
    await message.answer("üìû–í–≤–µ–¥—ñ—Ç—å –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*:", reply_markup=keyboard)
    await OrderStates.phone.set()
@dp.message_handler(state=OrderStates.phone)
async def get_phone(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or len(message.text) != 10:
        await message.answer("‚ùó –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä –±–µ–∑ +38. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 0931234567")
        return
    await state.update_data(phone=message.text)
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
    await message.answer("üèô–í–≤–µ–¥—ñ—Ç—å *–º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏*:", reply_markup=keyboard)
    await OrderStates.next()



@dp.message_handler(state=OrderStates.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(OrderStates.delivery_type)
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ù–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", callback_data="delivery_post"),
        InlineKeyboardButton("–ö—É—Ä'—î—Ä–æ–º –Ω–∞ –∞–¥—Ä–µ—Å—É", callback_data="delivery_address")
    ).add(InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å *—Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏*:", reply_markup=keyboard)
    
@dp.callback_query_handler(lambda c: c.data == "back", state=OrderStates.phone)
async def back_to_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *–ü–Ü–ë* –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
    await OrderStates.name.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "back", state=OrderStates.city)
async def back_to_phone(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await OrderStates.phone.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "back", state=OrderStates.delivery_type)
async def back_to_city(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:")
    await OrderStates.city.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data in ["delivery_post", "delivery_address"], state=OrderStates.delivery_type)
async def get_delivery_type(callback: types.CallbackQuery, state: FSMContext):
    delivery_type = callback.data
    await state.update_data(delivery_type=delivery_type)
    if delivery_type == "delivery_post":
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üöö–ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data="nova_post"),
            InlineKeyboardButton("üöõ–£–∫—Ä–ø–æ—à—Ç–∞", callback_data="ukr_post")
        )
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
        await OrderStates.post_service.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ —É –Ω–æ–≤–∏–π —Å—Ç–∞–Ω
    else:
        await callback.message.answer("üè° –í–Ω–µ—Å—ñ—Ç—å *–ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏* (–≤—É–ª–∏—Ü—è, –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
        await OrderStates.address_or_post.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data in ["nova_post", "ukr_post"], state=OrderStates.post_service)
async def get_post_service(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(post_service=callback.data)
    keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton("üè† –ù–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
    await callback.message.answer("üìÆ –í–≤–µ–¥—ñ—Ç—å *–Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ—à—Ç–æ–º–∞—Ç—É* (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):", reply_markup=keyboard)
    await OrderStates.address_or_post.set()
    await callback.answer()


@dp.message_handler(state=OrderStates.address_or_post)
async def get_address_or_post(message: types.Message, state: FSMContext):
    data = await state.get_data()
    delivery_type = data['delivery_type']

    if delivery_type == "delivery_post" and not message.text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è —Ü–∏—Ñ—Ä–∞–º–∏.")
        return

    if delivery_type == "delivery_post":
        post_service = data.get('post_service', '-')
        post_service_full = "–ù–æ–≤–∞ –ü–æ—à—Ç–∞" if post_service == "nova_post" else "–£–∫—Ä–ø–æ—à—Ç–∞"
        address_or_post = f"{post_service_full} ‚Ññ{message.text}"
    else:
        address_or_post = message.text

    await state.update_data(address_or_post=address_or_post)
    await OrderStates.next()
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    data = await state.get_data()
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
  

    # –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
    result = calculate_cart(cart)

    text_items = ""
    for i, item in enumerate(result['cart'], 1):
        text_items += f"{i}. {escape_md(item['name'])} ‚Äî {item['price']} –≥—Ä–Ω x {item['quantity']}\n"

    order_summary = (
        f"üì¶ *–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º:*\n"
        f"üë§ *–ü–Ü–ë:* {escape_md(data['name'])}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {escape_md(data['phone'])}\n"
        f"üèô *–ú—ñ—Å—Ç–æ:* {escape_md(data['city'])}\n"
        f"üìç *–ê–¥—Ä–µ—Å–∞ / –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:* {escape_md(data['address_or_post'])}\n"
        f"üõç *–¢–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫—É:*\n{text_items}"
        f"üíµ *–°—É–º–∞ –±–µ–∑ –∑–Ω–∏–∂–æ–∫:* {sum(i['price'] * i['quantity'] for i in result['cart'])} –≥—Ä–Ω\n"
        f"üéÅ *–ó–Ω–∏–∂–∫–∞:* {round(result['total_discount'])} –≥—Ä–Ω\n"
        f"‚úÖ *–î–æ —Å–ø–ª–∞—Ç–∏:* {round(result['total_price'])} –≥—Ä–Ω"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_order"),
        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")
    )
    await message.answer(order_summary, reply_markup=keyboard)
    await OrderStates.confirmation.set()


@dp.callback_query_handler(state=OrderStates.confirmation)
async def handle_order_confirmation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id

    if callback.data == "confirm_order":
        now = datetime.now()
        date = now.strftime("%Y-%m-%d")
        time = now.strftime("%H:%M:%S")
        name = data.get('name', '-')
        phone = data.get('phone', '-')
        city = data.get('city', '-')
        delivery_method = data.get('delivery_type', '-')
        address = data.get('address_or_post', '-')
        delivery_service = data.get('post_service', '-') if delivery_method == 'delivery_post' else '–ö—É—Ä‚Äô—î—Ä'

        cart_items = user_carts.get(user_id, [])
        result = calculate_cart(cart_items)

        order_description = "; ".join([f"{item['name']} x{item['quantity']} ({item['price']} –≥—Ä–Ω)" for item in result['cart']])
        total_sum = sum([item['price'] * item['quantity'] for item in result['cart']])
        total_discount = round(result['total_discount'] + result['day_discount_amount'], 2)
        final_price = round(result['total_price'], 2)
        shipping_payment = "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞" if result['free_shipping'] else "–û–¥–µ—Ä–∂—É–≤–∞—á –æ–ø–ª–∞—á—É—î"

        sheet.append_row([
            date, time, name, phone, city,
            delivery_service, address, order_description,
            total_sum, total_discount, final_price,
            shipping_payment, str(user_id), "", ""
        ])

        await callback.message.answer("üéâ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –¢–¢–ù –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")
        user_carts[user_id] = []

    elif callback.data == "cancel_order":
        await callback.message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

    await state.finish()
    await callback.answer()


@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    await bot.send_photo(
        chat_id=message.chat.id,
        photo="https://fleurparfum.net.ua/images/blog/shleifovie-duhi-woman.jpg.pagespeed.ce.3PKNQ9Vn2Z.jpg",
        caption=(
            "üß¥ *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Å–≤—ñ—Ç—É!*\n\n"
            "üå∫ –£ –Ω–∞—Å –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—Ä–µ–Ω–¥–æ–≤—ñ –∂—ñ–Ω–æ—á—ñ, —á–æ–ª–æ–≤—ñ—á—ñ —Ç–∞ —É–Ω—ñ—Å–µ–∫—Å –ø–∞—Ä—Ñ—É–º–∏ ‚Äî –æ–±—Ä–∞–Ω—ñ –∑ –ª—é–±–æ–≤'—é.\n\n"
            "üí∏ –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —â–µ–¥—Ä—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n\n"
            "üéÅ –£—Å—ñ –æ—Ö–æ—á—ñ –º–æ–∂—É—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.\n\n"
            "üöö –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é/–£–∫—Ä–ø–æ—à—Ç–æ—é. –î–æ—Å—Ç–∞–≤–∫–∞ - –∑–∞ –Ω–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏ –≤–µ–ª–∏–∫–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.\n\n"
            "üëá –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n\n"
        ),
        reply_markup=main_menu
    )

@dp.message_handler(state=None)
async def auto_start_from_any_message(message: types.Message):
    await bot.send_photo(
        chat_id=message.chat.id,
        photo="https://fleurparfum.net.ua/images/blog/shleifovie-duhi-woman.jpg.pagespeed.ce.3PKNQ9Vn2Z.jpg",
        caption=(
        "üß¥ *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Å–≤—ñ—Ç—É!*\n\n"
        "üå∫ –£ –Ω–∞—Å –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—Ä–µ–Ω–¥–æ–≤—ñ –∂—ñ–Ω–æ—á—ñ, —á–æ–ª–æ–≤—ñ—á—ñ —Ç–∞ —É–Ω—ñ—Å–µ–∫—Å –ø–∞—Ä—Ñ—É–º–∏ ‚Äî –æ–±—Ä–∞–Ω—ñ –∑ –ª—é–±–æ–≤'—é.\n\n"
        "üí∏ –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —â–µ–¥—Ä—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n\n"
        "üéÅ –£—Å—ñ –æ—Ö–æ—á—ñ –º–æ–∂—É—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.\n\n"
        "üöö –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é/–£–∫—Ä–ø–æ—à—Ç–æ—é. –î–æ—Å—Ç–∞–≤–∫–∞ - –∑–∞ –Ω–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏ –≤–µ–ª–∏–∫–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.\n\n"
        "üëá –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó."
        ),
        reply_markup=main_menu
    )

async def check_new_ttns():
    try:
        data = sheet.get_all_values()
        headers = data[0]
        rows = data[1:]

        tasks = []
        updates = []

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –∫–æ–ª–æ–Ω–æ–∫
        col_id = headers.index("ID –∫–ª—ñ—î–Ω—Ç–∞")
        col_ttn = headers.index("–ù–æ–º–µ—Ä –¢–¢–ù")
        col_confirm = headers.index("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏")
        confirm_col_number = col_confirm + 1  # –±–æ –Ω—É–º–µ—Ä–∞—Ü—ñ—è –∑ 1

        for i, row in enumerate(rows, start=2):  # –∑ —Ä—è–¥–∫–∞ 2, –±–æ 1 ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
            try:
                ttn = row[col_ttn]
                confirm = row[col_confirm]
                if ttn and confirm == "":
                    client_id = int(row[col_id])

                    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞—Å–∫ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
                    async def notify(client_id=client_id, ttn=ttn, row_num=i):
                        try:
                            await bot.send_message(
                                client_id,
                                f"üì¶ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–ù–æ–º–µ—Ä –¢–¢–ù: `{ttn}`"
                            )
                            updates.append(("‚úÖ", row_num))
                        except Exception:
                            logging.exception(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¢–¢–ù –∫–ª—ñ—î–Ω—Ç—É ID {client_id}")
                            updates.append(("‚ùå", row_num))

                    tasks.append(notify())

            except Exception:
                logging.exception(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä—è–¥–∫–∞ {i}")

        # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
        await asyncio.gather(*tasks)

        # –ú–∞—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Google Sheets
        if updates:
            cell_updates = []
            for value, row_num in updates:
                cell = rowcol_to_a1(row_num, confirm_col_number)
                cell_updates.append({'range': cell, 'values': [[value]]})
            sheet.batch_update([{
                'range': u['range'],
                'values': u['values']
            } for u in cell_updates])

    except Exception:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¢–¢–ù:")
        await asyncio.sleep(30)

async def periodic_check_new_ttns(interval=60):
    while True:
        await check_new_ttns()
        await asyncio.sleep(interval)
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(periodic_check_new_ttns())
    executor.start_polling(dp, skip_updates=True)
