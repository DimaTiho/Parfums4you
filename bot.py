import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, ReplyKeyboardRemove
from aiogram.utils import executor
from datetime import datetime
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
BOT_TOKEN = '7511346484:AAEm89gjBctt55ge8yEqrfHrxlJ-yS4d56U'
GOOGLE_SHEET_NAME = 'Parfums'
CREDENTIALS_FILE = 'credentials.json'
COST_PRICE = 80
FREE_DELIVERY_THRESHOLD = 500
DELIVERY_COST = 70

# === Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
try:
    workbook = client.open(GOOGLE_SHEET_NAME)
except gspread.SpreadsheetNotFound:
    print("‚ùó –¢–∞–±–ª–∏—Ü—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É –∞–±–æ –¥–æ—Å—Ç—É–ø–∏.")
    raise
sheet = workbook.sheet1
try:
    analytics_sheet = workbook.worksheet("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")
except:
    analytics_sheet = workbook.add_worksheet(title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", rows="10", cols="2")
    analytics_sheet.update("A1", [["–ü–æ–∫–∞–∑–Ω–∏–∫", "–ó–Ω–∞—á–µ–Ω–Ω—è"],
                                  ["–£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å", ""],
                                  ["–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", ""],
                                  ["–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", ""],
                                  ["–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∞—Ä–æ–º–∞—Ç", ""]])

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
user_data = {}
user_cart = {}

# === –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start ===
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    uid = message.from_user.id
    user_data[uid] = {"step": "name"}
    user_cart[uid] = []
    await message.answer("üëã –í—ñ—Ç–∞—î–º–æ! –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")

# === –û–±—Ä–æ–±–∫–∞ –µ—Ç–∞–ø—ñ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ===
@dp.message_handler(lambda m: m.text)
async def handle_order_steps(message: types.Message):
    uid = message.from_user.id
    data = user_data.setdefault(uid, {})
    step = data.get("step", "name")

    if step == "name":
        data["name"] = message.text
        data["step"] = "phone"
        await message.answer("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    elif step == "phone":
        data["phone"] = message.text
        data["step"] = "city"
        await message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ, –∫—É–¥–∏ –±—É–¥–µ –∑–¥—ñ–π—Å–Ω–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞:")
    elif step == "city":
        data["city"] = message.text
        data["step"] = "delivery"
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("üì¶ –ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data="delivery_np"),
            InlineKeyboardButton("‚úâÔ∏è –£–∫—Ä–ø–æ—à—Ç–∞", callback_data="delivery_ukr")
        )
        kb.add(InlineKeyboardButton("üè† –ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="delivery_address"))
        await message.answer("üöö –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
    else:
        await message.answer("‚ùó –í–≤–µ–¥–µ–Ω–Ω—è –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ /start")

# === –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏ ===
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("delivery_"))
async def process_delivery_choice(callback_query: types.CallbackQuery):
    uid = callback_query.from_user.id
    data = user_data.get(uid, {})
    if not data:
        await callback_query.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ /start")
        return

    delivery_type = callback_query.data.replace("delivery_", "")
    delivery_map = {
        "np": "–ù–æ–≤–∞ –ü–æ—à—Ç–∞",
        "ukr": "–£–∫—Ä–ø–æ—à—Ç–∞",
        "address": "–ê–¥—Ä–µ—Å–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞"
    }
    delivery_name = delivery_map.get(delivery_type, "–ù–µ–≤—ñ–¥–æ–º–æ")
    data["delivery"] = delivery_type

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    cart = user_cart.get(uid, [])
    total = sum(item['price'] for item in cart)
    delivery_fee = 0 if total >= FREE_DELIVERY_THRESHOLD else DELIVERY_COST
    final_total = total + delivery_fee

    summary = (
        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
        f"üë§ –Ü–º'—è: {data.get('name')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"üèô –ú—ñ—Å—Ç–æ: {data.get('city')}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n"
        f"üõí –ö–æ—à–∏–∫: {', '.join([item['name'] for item in cart])}\n"
        f"üíµ –°—É–º–∞: {total} –≥—Ä–Ω\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_fee} –≥—Ä–Ω\n"
        f"üí∞ –í—Å—å–æ–≥–æ –¥–æ —Å–ø–ª–∞—Ç–∏: {final_total} –≥—Ä–Ω"
    )

    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer(summary)

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([
        now,
        data.get("name", ""),
        data.get("phone", ""),
        data.get("city", ""),
        delivery_name,
        ", ".join([item['name'] for item in cart]),
        total,
        delivery_fee,
        final_total
    ])

    user_data.pop(uid, None)
    user_cart.pop(uid, None)

# === –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞ (–ø—Ä–∏–∫–ª–∞–¥ —Ñ—É–Ω–∫—Ü—ñ—ó) ===
@dp.message_handler(commands=["add"])
async def add_to_cart(message: types.Message):
    uid = message.from_user.id
    if uid not in user_cart:
        user_cart[uid] = []

    item = {"name": "Chanel No. 5", "price": 120}
    user_cart[uid].append(item)
    await message.answer(f"‚úÖ {item['name']} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!")

# === –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—à–∏–∫–∞ ===
@dp.message_handler(commands=["cart"])
async def view_cart(message: types.Message):
    uid = message.from_user.id
    cart = user_cart.get(uid, [])

    if not cart:
        await message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    text = "üõç –í–∞—à –∫–æ—à–∏–∫:\n"
    total = 0
    for idx, item in enumerate(cart, start=1):
        text += f"{idx}. {item['name']} ‚Äî {item['price']} –≥—Ä–Ω\n"
        total += item['price']

    text += f"\nüíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total} –≥—Ä–Ω"
    await message.answer(text)

# === –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ –∫–æ—à–∏–∫–∞ ===
@dp.message_handler(commands=["remove"])
async def remove_from_cart(message: types.Message):
    uid = message.from_user.id
    cart = user_cart.get(uid, [])

    if not cart:
        await message.answer("‚ùå –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù—ñ—á–æ–≥–æ –≤–∏–¥–∞–ª—è—Ç–∏.")
        return

    args = message.get_args()
    if not args.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /remove 1")
        return

    index = int(args) - 1
    if 0 <= index < len(cart):
        removed = cart.pop(index)
        await message.answer(f"üóë {removed['name']} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞.")
    else:
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É.")
