import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import Message
from aiogram.types import CallbackQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import random
from aiogram.utils.markdown import escape_md  # ‚úÖ –î–æ–¥–∞–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏ Markdown

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = '7511346484:AAEm89gjBctt55ge8yEqrfHrxlJ-yS4d56U'
GOOGLE_SHEET_NAME = 'Parfums'
CREDENTIALS_FILE = 'credentials.json'
# === Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
workbook = client.open(GOOGLE_SHEET_NAME)
sheet = workbook.sheet1
try:
    analytics_sheet = workbook.worksheet("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞")
except:
    analytics_sheet = workbook.add_worksheet(title="–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", rows="10", cols="2")
    analytics_sheet.update("A1", [["–ü–æ–∫–∞–∑–Ω–∏–∫", "–ó–Ω–∞—á–µ–Ω–Ω—è"],
                                   ["–£—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å", ""],
                                   ["–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", ""],
                                   ["–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", ""],
                                   ["–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∞—Ä–æ–º–∞—Ç", ""]])


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.MARKDOWN_V2)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class OrderStates(StatesGroup):
    name = State()
    phone = State()
    city = State()
    delivery_type = State()
    post_service = State()
    address_or_post = State()
    confirmation = State()

# –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞

# === –ê–∫—Ü—ñ—è: 3-–π –ø–∞—Ä—Ñ—É–º –∑—ñ –∑–Ω–∏–∂–∫–æ—é 50% ===
def apply_third_item_discount(cart):
    if len(cart) >= 3:
        sorted_cart = sorted(cart, key=lambda x: x['price'])
        sorted_cart[2]['price'] = round(sorted_cart[2]['price'] * 0.5, 2)
    return cart
user_carts = {}
user_discounts = {}
user_data = {}

@dp.message_handler(lambda message: message.text == "–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏" or message.text.lower() == "/how_to_order")
async def how_to_order(message: types.Message):
    instructions = (
        "üõç *–Ø–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n"
        "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ *–ö–∞—Ç–∞–ª–æ–≥* —ñ –æ–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ñ—É–º–∏\n"
        "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å *–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫*\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É *–ö–æ—à–∏–∫* —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å *–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n"
        "4Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñ (—ñ–º‚Äô—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –º—ñ—Å—Ç–æ, –¥–æ—Å—Ç–∞–≤–∫–∞)\n"
        "5Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî —ñ –º–∏ –≤—Å–µ –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!\n"
        "üßæ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –¢–¢–ù –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.\n"
    )
    await message.answer(instructions)

@dp.callback_query_handler(lambda c: c.data == "how_to_order")
async def how_to_order_callback(callback: types.CallbackQuery):
    instructions = (
        "üõç *–Ø–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n"
        "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏–π—Ç–µ *–ö–∞—Ç–∞–ª–æ–≥* —ñ –æ–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—Ñ—É–º–∏\n"
        "2Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å *–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫*\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É *–ö–æ—à–∏–∫* —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å *–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n"
        "4Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñ (—ñ–º‚Äô—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –º—ñ—Å—Ç–æ, –¥–æ—Å—Ç–∞–≤–∫–∞)\n"
        "5Ô∏è‚É£ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî —ñ –º–∏ –≤—Å–µ –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!\n"
        "üßæ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –¢–¢–ù –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.\n"
    )
    await callback.message.answer(instructions)
    await callback.answer()



@dp.callback_query_handler(lambda c: c.data == "main_menu" or c.data == "start")
async def back_to_main(callback: types.CallbackQuery):
    await bot.send_photo(
    chat_id=callback.message.chat.id,
    photo="https://fleurparfum.net.ua/images/blog/shleifovie-duhi-woman.jpg.pagespeed.ce.3PKNQ9Vn2Z.jpg",  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤–æ—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    caption=(
            "üß¥ *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Å–≤—ñ—Ç—É!*\n\n"
            "üå∫ –£ –Ω–∞—Å –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—Ä–µ–Ω–¥–æ–≤—ñ –∂—ñ–Ω–æ—á—ñ, —á–æ–ª–æ–≤—ñ—á—ñ —Ç–∞ —É–Ω—ñ—Å–µ–∫—Å –ø–∞—Ä—Ñ—É–º–∏ ‚Äî –æ–±—Ä–∞–Ω—ñ –∑ –ª—é–±–æ–≤'—é.\n\n"
            "üí∏ –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —â–µ–¥—Ä—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n\n"
            "üéÅ –£—Å—ñ –æ—Ö–æ—á—ñ –º–æ–∂—É—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.\n\n"
            "üöö –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é/–£–∫—Ä–ø–æ—à—Ç–æ—é. –î–æ—Å—Ç–∞–≤–∫–∞ - –∑–∞ –Ω–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏ –≤–µ–ª–∏–∫–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.\n\n"
            "üëá –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n\n"
        ),
        reply_markup=main_menu,
    )
    await callback.answer()
  # –°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
main_menu_buttons = [
    [InlineKeyboardButton("üì¶–ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º", callback_data="catalog"), InlineKeyboardButton("üî•–ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏", callback_data="promotions")],
    [InlineKeyboardButton("üìâ–ó–Ω–∏–∂–∫–∞ –¥–Ω—è", callback_data="daily_discount")],
    [InlineKeyboardButton("‚ÑπÔ∏è–Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏?", callback_data="how_to_order"), InlineKeyboardButton("üí¨–í—ñ–¥–≥—É–∫–∏", callback_data="reviews")],
    [InlineKeyboardButton("‚úíÔ∏è–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏", url="https://t.me/Dimanicer"), InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart")]
]
main_menu = InlineKeyboardMarkup(inline_keyboard=main_menu_buttons)

# === –ö–∞—Ç–∞–ª–æ–≥ –ø–∞—Ä—Ñ—É–º—ñ–≤ ===
catalog_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton("üíÉüèª–ñ—ñ–Ω–æ—á—ñ", callback_data="cat_women"), InlineKeyboardButton("üåπüíê–£–Ω—ñ—Å–µ–∫—Å", callback_data="cat_unisex")],
    [InlineKeyboardButton("‚ÄºÔ∏è–¢–æ–ø –ø—Ä–æ–¥–∞–∂", callback_data="cat_top")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
])

perfume_catalog = {
    "cat_women": [
        {"name": "Chanel Coco Mademoiselle", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA."},
        {"name": "Dior J'adore", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA."}
    ],
    "cat_unisex": [
        {"name": "Tom Ford Tobacco Vanille", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA."},
        {"name": "Byredo Gypsy Water", "price": 200, "photo": "https://example.com/byredo.jpg"}
    ],
    "cat_top": [
        {"name": "Creed Aventus", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA."},
        {"name": "Maison Francis Kurkdjian Baccarat Rouge", "price": 200, "photo": "https://images.pexels.com/photos/965731/pexels-photo-965731.jpeg?cs=srgb&dl=pexels-valeriya-965731.jpg&fm=jpg&_gl=1*5lwmep*_ga*MTMzNzc3NDI2LjE3NDY4ODA2NzY.*_ga_8JE65Q40S6*czE3NDY4ODA2NzUkbzEkZzEkdDE3NDY4ODA2ODAkajAkbDAkaDA."}
    ]
}

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def handle_category(callback: types.CallbackQuery):
    perfumes = perfume_catalog.get(callback.data, [])
    for p in perfumes:
        buttons = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞", callback_data=f"add_{p['name']}"), InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="catalog")],
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"), InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
])

        await bot.send_photo(callback.from_user.id, p['photo'], caption=f"*{p['name']}*\nüí∏ {p['price']} –≥—Ä–Ω", reply_markup=buttons)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "catalog")
async def show_catalog(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∞—Ä—Ñ—É–º—ñ–≤:", reply_markup=catalog_menu)
# –ó–Ω–∏–∂–∫–∞ –¥–Ω—è
daily_discount = {}
last_discount_update = None

def generate_daily_discount():
    global daily_discount, last_discount_update
    all_perfumes = sum(perfume_catalog.values(), [])
    daily_discount = random.choice(all_perfumes)
    last_discount_update = datetime.now().date()

@dp.message_handler(lambda message: message.text == "–ó–Ω–∏–∂–∫–∞ –¥–Ω—è")
async def daily_discount_text_handler(message: types.Message):
    global daily_discount, last_discount_update
    if daily_discount == {} or last_discount_update != datetime.now().date():
        generate_daily_discount()
    p = daily_discount
    discounted_price = int(p['price'] * 0.85)
    caption = (
        f"*–ó–Ω–∏–∂–∫–∞ –¥–Ω—è!*\n\n"
        f"–°—å–æ–≥–æ–¥–Ω—ñ —É –Ω–∞—Å –∞–∫—Ü—ñ—è –Ω–∞:\n"
        f"*{p['name']}*\n"
        f"üí∏ –ó–∞–º—ñ—Å—Ç—å {p['price']} –≥—Ä–Ω ‚Äî –ª–∏—à–µ {discounted_price} –≥—Ä–Ω!\n\n"
        f"–í—Å—Ç–∏–≥–Ω—ñ—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é!"
    )
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é", callback_data=f"discount_{p['name']}")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await message.answer_photo(photo=p['photo'], caption=caption, reply_markup=buttons)

@dp.callback_query_handler(lambda c: c.data == "daily_discount")
async def daily_discount_callback_handler(callback: types.CallbackQuery):
    global daily_discount, last_discount_update
    if daily_discount == {} or last_discount_update != datetime.now().date():
        generate_daily_discount()
    p = daily_discount
    discounted_price = int(p['price'] * 0.85)
    caption = (
        f"*–ó–Ω–∏–∂–∫–∞ –¥–Ω—è!*\n\n"
        f"–°—å–æ–≥–æ–¥–Ω—ñ —É –Ω–∞—Å –∞–∫—Ü—ñ—è –Ω–∞:\n"
        f"*{p['name']}*\n"
        f"üí∏ –ó–∞–º—ñ—Å—Ç—å {p['price']} –≥—Ä–Ω ‚Äî –ª–∏—à–µ {discounted_price} –≥—Ä–Ω!\n\n"
        f"–í—Å—Ç–∏–≥–Ω—ñ—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é!"
    )
    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é", callback_data=f"discount_{p['name']}")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await callback.message.answer_photo(photo=p['photo'], caption=caption, reply_markup=buttons)
    await callback.answer()
@dp.callback_query_handler(lambda c: c.data.startswith("discount_"))
async def add_discount_to_cart(callback: types.CallbackQuery):
    name = callback.data.replace("discount_", "")
    user_id = callback.from_user.id
    all_perfumes = sum(perfume_catalog.values(), [])
    perfume = next((p for p in all_perfumes if p["name"] == name), None)
    if not perfume:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    discounted_price = int(perfume["price"] * 0.85)
    user_carts.setdefault(user_id, []).append({"name": name + " (–∑—ñ –∑–Ω–∏–∂–∫–æ—é)", "price": discounted_price})
    await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é!")
# === –í—ñ–¥–≥—É–∫–∏ –∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º ===
used_promo_users = set()
PROMO_CODES = ["PROMO10", "DISCOUNT15", "SALE20"]

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
import gspread
gc = gspread.service_account(filename='credentials.json')
spreadsheet = gc.open("Parfums")
reviews_sheet = spreadsheet.worksheet("–í—ñ–¥–≥—É–∫–∏")  # 3-–π –∞—Ä–∫—É—à

class ReviewState(StatesGroup):
    waiting_text = State()

@dp.callback_query_handler(lambda c: c.data == "reviews")
async def ask_for_review(callback: CallbackQuery):
    await bot.send_message(callback.from_user.id, "‚úèÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –Ω–∏–∂—á–µ —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")
    await ReviewState.waiting_text.set()
    await callback.answer()

@dp.message_handler(state=ReviewState.waiting_text)
async def receive_review(message: Message, state: FSMContext):
    user_id = message.from_user.id
    review_text = message.text

    now_str = datetime.now().strftime("%Y-%m-%d %H:%M")
    try:
        reviews_sheet.append_row([str(user_id), review_text, now_str])
    except Exception as e:
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.finish()
        return

    if user_id in used_promo_users:
        await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! –í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω—ñ—à–µ.")
    else:
        if PROMO_CODES:
            promo = PROMO_CODES.pop()
        else:
            promo = "PROMO10"
        used_promo_users.add(user_id)
        await message.answer(f"üéÅ –î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: *{promo}*")

    await state.finish()

@dp.message_handler(commands=["reviews"])
async def show_reviews(message: Message):
    all_reviews = reviews_sheet.get_all_values()

    if len(all_reviews) <= 1:
        await message.answer("–ü–æ–∫–∏ —â–æ –≤—ñ–¥–≥—É–∫—ñ–≤ –Ω–µ–º–∞—î.")
        return

    reviews_texts = [row[1] for row in all_reviews[1:] if len(row) > 1 and row[1].strip()]

    text = "*–í—ñ–¥–≥—É–∫–∏ –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:*\n\n"
    for r in reviews_texts[-5:]:
        text += f"‚Ä¢ {r}\n\n"

    await message.answer(text, parse_mode="Markdown")


# –ë–ª–æ–∫: –ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏
@dp.message_handler(lambda message: message.text == "–ê–∫—Ü—ñ—ó —Ç–∞ –±–æ–Ω—É—Å–∏")
async def promotions_handler(message: types.Message):
    await promotions_callback(message)

@dp.callback_query_handler(lambda c: c.data == "promotions")
async def promotions_callback(callback_or_message):
    promo_text = (
        "üéâ *–ù–∞—è–≤–Ω—ñ –∞–∫—Ü—ñ—ó:*\n"
        "1Ô∏è‚É£ *3-–π –ø–∞—Ä—Ñ—É–º –∑—ñ –∑–Ω–∏–∂–∫–æ—é -50%*\n"
        "–ö—É–ø—ñ—Ç—å 2 –±—É–¥—å-—è–∫—ñ –ø–∞—Ä—Ñ—É–º–∏ ‚Äî —Ç—Ä–µ—Ç—ñ–π –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∑—ñ –∑–Ω–∏–∂–∫–æ—é 50%\n"
        "2Ô∏è‚É£ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 500 –≥—Ä–Ω*\n"
        "–û—Ñ–æ—Ä–º—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—É–º—É –≤—ñ–¥ 500 –≥—Ä–Ω (–±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏) ‚Äî –º–∏ –¥–æ—Å—Ç–∞–≤–∏–º–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ!\n"
        "3Ô∏è‚É£ *–ó–Ω–∏–∂–∫–∞ –¥–ª—è –ø–æ–¥—Ä—É–≥ ‚Äî 10% –∫–æ–∂–Ω—ñ–π!*\n"
        "–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –ø–æ–¥—Ä—É–≥—É ‚Äî –æ–±–∏–¥–≤—ñ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∑–Ω–∏–∂–∫—É –ø—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
        "4Ô∏è‚É£ *–ù–∞–±—ñ—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é -15%*\n"
        "–ü—Ä–∏ –ø–æ–∫—É–ø—Ü—ñ 3+ –ø–∞—Ä—Ñ—É–º—ñ–≤ ‚Äî –∑–Ω–∏–∂–∫–∞ 15% –Ω–∞ –∫–æ–∂–µ–Ω.\n"
    )

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ 3-–π –ø–∞—Ä—Ñ—É–º", callback_data="promo_cond_1"),
        InlineKeyboardButton("üì¶ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ—ó –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="promo_cond_2"),
        InlineKeyboardButton("üì¶ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ –∑ –ø–æ–¥—Ä—É–≥–æ—é", callback_data="promo_cond_3"),
        InlineKeyboardButton("üì¶ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton("üìÑ –£–º–æ–≤–∏ –Ω–∞–±–æ—Ä—É –∑—ñ –∑–Ω–∏–∂–∫–æ—é", callback_data="promo_cond_4"),
        InlineKeyboardButton("üì¶ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog"),
        InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="main_menu")
    )

    if isinstance(callback_or_message, types.CallbackQuery):
        await callback_or_message.message.answer(promo_text, reply_markup=keyboard)
        await callback_or_message.answer()
    else:
        await callback_or_message.answer(promo_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("promo_cond_"))
async def promo_conditions(call: types.CallbackQuery):
    conditions = {
        "promo_cond_1": "üéâ *3-–π –ø–∞—Ä—Ñ—É–º –∑—ñ –∑–Ω–∏–∂–∫–æ—é -50%*"
"–ö—É–ø—ñ—Ç—å –±—É–¥—å-—è–∫—ñ 2 –ø–∞—Ä—Ñ—É–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ —Ç—Ä–µ—Ç—ñ–π –∑—ñ –∑–Ω–∏–∂–∫–æ—é 50%."
"–ó–Ω–∏–∂–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –Ω–∞–π–º–µ–Ω—à–æ–≥–æ –∑–∞ —Ü—ñ–Ω–æ—é —Ç–æ–≤–∞—Ä—É. –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –≤ –æ–±–ª—ñ–∫.",
        "promo_cond_2": "üöö *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—ñ–¥ 500 –≥—Ä–Ω*"
"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏ –º–∞—î –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 500 –≥—Ä–Ω.",
        "promo_cond_3": "üë≠ *–ó–Ω–∏–∂–∫–∞ –¥–ª—è –ø–æ–¥—Ä—É–≥ ‚Äî 10% –∫–æ–∂–Ω—ñ–π!*"
"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–¥—Ä—É–∑—ñ. –û–±–∏–¥–≤—ñ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –∑–Ω–∏–∂–∫—É –ø—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
        "promo_cond_4": "üéÅ *–ù–∞–±—ñ—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é -15%*"
"–ü—Ä–∏ –∫—É–ø—ñ–≤–ª—ñ 3 –∞–±–æ –±—ñ–ª—å—à–µ –ø–∞—Ä—Ñ—É–º—ñ–≤ ‚Äî –∑–Ω–∏–∂–∫–∞ 15% –Ω–∞ –∫–æ–∂–µ–Ω."
    }
    await call.message.answer(conditions[call.data])
    await call.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("add_"))
async def add_to_cart_callback(callback: types.CallbackQuery):
    perfume_name = callback.data[4:]
    user_id = callback.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = []
    user_carts[user_id].append({"name": perfume_name, "price": 200})

    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton("üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="show_cart"),
            InlineKeyboardButton("üßæ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout")
        ],
        [
            InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="catalog"),
            InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    await callback.message.answer(f"‚úÖ {perfume_name} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞.", reply_markup=buttons)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "show_cart")
async def show_cart_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, [])
    if not cart:
        await callback.message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="main_menu")]]))
        return

    cart = apply_third_item_discount(cart)
    counted = {}
    total = 0
    for item in cart:
        name = item['name']
        if name not in counted:
            counted[name] = {'count': 1, 'price': item['price']}
        else:
            counted[name]['count'] += 1
            counted[name]['price'] += item['price']
        total += item['price']

    text = "*–í–∞—à –∫–æ—à–∏–∫:*"
    i = 1
    for name, data in counted.items():
        text += f"{i}. {name} ‚Äî {data['count']} —à—Ç. x {round(data['price'] / data['count'])} –≥—Ä–Ω = {data['price']} –≥—Ä–Ω"
        i += 1

    discount = user_discounts.get(user_id, 0)
    final_price = total - discount
    text += f"üíµ –°—É–º–∞ –±–µ–∑ –∑–Ω–∏–∂–æ–∫: {total} –≥—Ä–Ω"
    if discount:
        text += f"üéÅ –ó–Ω–∏–∂–∫–∞: {discount} –≥—Ä–Ω"
        text += f"‚úÖ –î–æ —Å–ø–ª–∞—Ç–∏: {final_price} –≥—Ä–Ω"

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üßæ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout"),
        InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart"),
        InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="main_menu")
    )
    await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("increase_"))
async def increase_item_quantity(callback: types.CallbackQuery):
    name = callback.data.replace("increase_", "")
    user_id = callback.from_user.id
    user_carts.setdefault(user_id, []).append({"name": name, "price": 200})
    await show_cart_callback(callback)

@dp.callback_query_handler(lambda c: c.data.startswith("decrease_"))
async def decrease_item_quantity(callback: types.CallbackQuery):
    name = callback.data.replace("decrease_", "")
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, [])
    for i, item in enumerate(cart):
        if item["name"] == name:
            cart.pop(i)
            break
    await show_cart_callback(callback)

@dp.callback_query_handler(lambda c: c.data == "clear_cart")
async def clear_cart_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_carts[user_id] = []
    await callback.message.answer("üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "checkout")
async def checkout_handler(callback: types.CallbackQuery):
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *–ü–Ü–ë* –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
    await OrderStates.name.set()
    await callback.answer()


@dp.message_handler(lambda message: message.text.lower().startswith("–¥–æ–¥–∞—Ç–∏ "))
async def add_to_cart(message: types.Message):
    user_id = message.from_user.id
    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –î–æ–¥–∞—Ç–∏ –ù–∞–∑–≤–∞ –¶—ñ–Ω–∞")
        return
    name = parts[1]
    try:
        price = int(parts[2])
    except ValueError:
        await message.answer("‚ùó –¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return

    if user_id not in user_carts:
        user_carts[user_id] = []
    user_carts[user_id].append({"name": name, "price": price})
    await message.answer(f"‚úÖ {name} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞ –∑–∞ {price} –≥—Ä–Ω.")

# –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫
@dp.message_handler(commands=["–∫–æ—à–∏–∫", "cart"])
async def view_cart(message: types.Message):
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü—ñ—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é show_cart_callback –∑ —Ñ–µ–π–∫–æ–≤–∏–º callback
    class DummyCallback:
        def __init__(self, user_id, message):
            self.from_user = types.User(id=user_id, is_bot=False, first_name="User")
            self.message = message
            self.data = "show_cart"
    await show_cart_callback(DummyCallback(message.from_user.id, message))

# –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫
@dp.message_handler(commands=["–æ—á–∏—Å—Ç–∏—Ç–∏", "clear"])
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    user_carts[user_id] = []
    await message.answer("üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")

# –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä —ñ–∑ –∫–æ—à–∏–∫–∞
@dp.message_handler(lambda message: message.text.lower().startswith("–≤–∏–¥–∞–ª–∏—Ç–∏ "))
async def remove_from_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    try:
        index = int(message.text.split()[1]) - 1
        if 0 <= index < len(cart):
            removed = cart.pop(index)
            await message.answer(f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ: {removed['name']}")
        else:
            await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É.")
    except (IndexError, ValueError):
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: –í–∏–¥–∞–ª–∏—Ç–∏ 1")

# === –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ===


@dp.message_handler(state=OrderStates.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû–í–≤–µ–¥—ñ—Ç—å –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="back")]]))
    await OrderStates.phone.set()

@dp.message_handler(state=OrderStates.phone)
async def get_phone(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or len(message.text) != 10:
        await message.answer("‚ùó –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 10 —Ü–∏—Ñ—Ä –±–µ–∑ +38. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 0931234567")
        return
    await state.update_data(phone=message.text)
    await message.answer("üèô–í–≤–µ–¥—ñ—Ç—å *–º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏*:")
    await OrderStates.next()



@dp.message_handler(state=OrderStates.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(OrderStates.delivery_type)
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ù–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", callback_data="delivery_post"),
        InlineKeyboardButton("–ö—É—Ä'—î—Ä–æ–º –Ω–∞ –∞–¥—Ä–µ—Å—É", callback_data="delivery_address")
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å *—Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏*:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "back", state=OrderStates.phone)
async def back_to_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *–ü–Ü–ë* –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
    await OrderStates.name.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "back", state=OrderStates.city)
async def back_to_phone(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await OrderStates.phone.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "back", state=OrderStates.delivery_type)
async def back_to_city(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:")
    await OrderStates.city.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data in ["delivery_post", "delivery_address"], state=OrderStates.delivery_type)
async def get_delivery_type(callback: types.CallbackQuery, state: FSMContext):
    delivery_type = callback.data
    await state.update_data(delivery_type=delivery_type)
    if delivery_type == "delivery_post":
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üöö–ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data="nova_post"),
            InlineKeyboardButton("üöõ–£–∫—Ä–ø–æ—à—Ç–∞", callback_data="ukr_post")
        )
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
        await OrderStates.post_service.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ —É –Ω–æ–≤–∏–π —Å—Ç–∞–Ω
    else:
        await callback.message.answer("üè° –í–Ω–µ—Å—ñ—Ç—å *–ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏* (–≤—É–ª–∏—Ü—è, –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
        await OrderStates.address_or_post.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data in ["nova_post", "ukr_post"], state=OrderStates.post_service)
async def get_post_service(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(post_service=callback.data)
    await callback.message.answer("üìÆ –í–≤–µ–¥—ñ—Ç—å *–Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ—à—Ç–æ–º–∞—Ç—É* (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):")
    await OrderStates.address_or_post.set()
    await callback.answer()


@dp.message_handler(state=OrderStates.address_or_post)
async def get_address_or_post(message: types.Message, state: FSMContext):
    data = await state.get_data()
    delivery_type = data['delivery_type']

    if delivery_type == "delivery_post" and not message.text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è —Ü–∏—Ñ—Ä–∞–º–∏.")
        return

    if delivery_type == "delivery_post":
        post_service = data.get('post_service', '-')
        post_service_full = "–ù–æ–≤–∞ –ü–æ—à—Ç–∞" if post_service == "nova_post" else "–£–∫—Ä–ø–æ—à—Ç–∞"
        address_or_post = f"{post_service_full} ‚Ññ{message.text}"
    else:
        address_or_post = message.text

    await state.update_data(address_or_post=address_or_post)


  
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    data = await state.get_data()
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])
    cart = apply_third_item_discount(cart)

    text_items = ""
    total = 0
    for i, item in enumerate(cart, 1):
        text_items += f"{i}. {escape_md(item['name'])} ‚Äî {item['price']} –≥—Ä–Ω\n"
        total += item['price']

    discount = user_discounts.get(user_id, 0)
    final = total - discount

    order_summary = (
        f"üì¶ *–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º:*\n"
        f"üë§ *–ü–Ü–ë:* {escape_md(data['name'])}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {escape_md(data['phone'])}\n"
        f"üèô *–ú—ñ—Å—Ç–æ:* {escape_md(data['city'])}\n"
        f"üìç *–ê–¥—Ä–µ—Å–∞ / –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:* {escape_md(data['address_or_post'])}\n"
        f"üõç *–¢–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫—É:*\n{text_items}"
        f"üíµ *–°—É–º–∞ –±–µ–∑ –∑–Ω–∏–∂–æ–∫:* {total} –≥—Ä–Ω\n"
        f"üéÅ *–ó–Ω–∏–∂–∫–∞:* {discount} –≥—Ä–Ω\n"
        f"‚úÖ *–î–æ —Å–ø–ª–∞—Ç–∏:* {final} –≥—Ä–Ω"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_order"),
        InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")
    )
    await message.answer(order_summary, reply_markup=keyboard)
    await OrderStates.confirmation.set()


@dp.callback_query_handler(state=OrderStates.confirmation)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "confirm_order":
        data = await state.get_data()

        now = datetime.now()
        date = now.strftime("%Y-%m-%d")
        time = now.strftime("%H:%M:%S")
        name = data['name']
        phone = data['phone']
        city = data['city']
        delivery_type = data.get('post_service', '–ê–¥—Ä–µ—Å–∞') if data['delivery_type'] == 'delivery_post' else '–ê–¥—Ä–µ—Å–∞'
        address = data.get('address_or_post', '-')
        user_id = callback.from_user.id

        cart_items = user_carts.get(user_id, [])
        cart_items = apply_third_item_discount(cart_items)
        order_description = "; ".join([f"{item['name']} ({item['price']} –≥—Ä–Ω)" for item in cart_items]) if cart_items else "-"
        total_sum = sum([item['price'] for item in cart_items]) if cart_items else 0
        discount = user_discounts.get(user_id, 0)
        final_price = total_sum - discount

        sheet.append_row([
            date,
            time,
            name,
            phone,
            city,
            delivery_type,
            address,
            order_description,
            total_sum,
            discount,
            user_id,
            ""
        ])

        await callback.message.answer("üéâ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –¢–¢–ù –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.")
        user_carts[user_id] = []
    else:
        await callback.message.answer("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.finish()
    await callback.answer()



@dp.callback_query_handler(lambda c: c.data == "cancel_order", state=OrderStates.confirmation)
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback.from_user.id, "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.finish()


@dp.message_handler(commands=["start"])
async def handle_start(message: types.Message):
    await bot.send_photo(
        chat_id=message.chat.id,
        photo="https://fleurparfum.net.ua/images/blog/shleifovie-duhi-woman.jpg.pagespeed.ce.3PKNQ9Vn2Z.jpg",
        caption=(
            "üß¥ *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Å–≤—ñ—Ç—É!*\n\n"
            "üå∫ –£ –Ω–∞—Å –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—Ä–µ–Ω–¥–æ–≤—ñ –∂—ñ–Ω–æ—á—ñ, —á–æ–ª–æ–≤—ñ—á—ñ —Ç–∞ —É–Ω—ñ—Å–µ–∫—Å –ø–∞—Ä—Ñ—É–º–∏ ‚Äî –æ–±—Ä–∞–Ω—ñ –∑ –ª—é–±–æ–≤'—é.\n\n"
            "üí∏ –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —â–µ–¥—Ä—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n\n"
            "üéÅ –£—Å—ñ –æ—Ö–æ—á—ñ –º–æ–∂—É—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.\n\n"
            "üöö –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é/–£–∫—Ä–ø–æ—à—Ç–æ—é. –î–æ—Å—Ç–∞–≤–∫–∞ - –∑–∞ –Ω–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏ –≤–µ–ª–∏–∫–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.\n\n"
            "üëá –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n\n"
        ),
        reply_markup=main_menu
    )

@dp.message_handler(state=None)
async def auto_start_from_any_message(message: types.Message):
    await bot.send_photo(
        chat_id=message.chat.id,
        photo="https://fleurparfum.net.ua/images/blog/shleifovie-duhi-woman.jpg.pagespeed.ce.3PKNQ9Vn2Z.jpg",
        caption=(
           "üß¥ *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –∞—Ä–æ–º–∞—Ç–Ω–æ–≥–æ —Å–≤—ñ—Ç—É!*\n\n"
            "üå∫ –£ –Ω–∞—Å –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –±—Ä–µ–Ω–¥–æ–≤—ñ –∂—ñ–Ω–æ—á—ñ, —á–æ–ª–æ–≤—ñ—á—ñ —Ç–∞ —É–Ω—ñ—Å–µ–∫—Å –ø–∞—Ä—Ñ—É–º–∏ ‚Äî –æ–±—Ä–∞–Ω—ñ –∑ –ª—é–±–æ–≤'—é.\n\n"
            "üí∏ –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â—ñ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —â–µ–¥—Ä—ñ –∑–Ω–∏–∂–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n\n"
            "üéÅ –£—Å—ñ –æ—Ö–æ—á—ñ –º–æ–∂—É—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—î–º–Ω—ñ –ø–æ–¥–∞—Ä—É–Ω–∫–∏.\n\n"
            "üöö –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ù–æ–≤–æ—é –ü–æ—à—Ç–æ—é/–£–∫—Ä–ø–æ—à—Ç–æ—é. –î–æ—Å—Ç–∞–≤–∫–∞ - –∑–∞ –Ω–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏ –≤–µ–ª–∏–∫–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ.\n\n"
            "üëá –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n\n"
        ),
        reply_markup=main_menu
    )

@dp.message_handler(commands=["track_ttns"])
async def track_pending_orders(message: types.Message):
    all_data = sheet.get_all_values()
    for i, row in enumerate(all_data[1:], start=2):  # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        try:
            chat_id = row[10].strip() if len(row) > 10 else ""
            ttn = row[11].strip() if len(row) > 11 else ""
            status = row[12].strip() if len(row) > 12 else ""

            if chat_id.isdigit() and ttn and not status:
                await bot.send_message(int(chat_id), f"üì¶ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó: *{ttn}*")
                logging.info(f"–û–Ω–æ–≤–ª—é—é —Ä—è–¥–æ–∫ {i}, –∫–æ–ª–æ–Ω–∫–∞ 13, —Å—Ç–∞–≤–ª—é '‚úÖ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ'")
                sheet.update(f'M{i}', "‚úÖ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
                await asyncio.sleep(1)

        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ä—è–¥–∫—É {i}: {e}")

sent_ttns = set()

async def check_new_ttns():
    while True:
        try:
            all_rows = sheet.get_all_values()
            header = all_rows[0]
            ttn_index = header.index("–ù–æ–º–µ—Ä –¢–¢–ù")
            chat_id_index = header.index("Chat ID")

            for row in all_rows[1:]:
                if len(row) > max(ttn_index, chat_id_index):
                    ttn = row[ttn_index].strip()
                    chat_id = row[chat_id_index].strip()
                    if ttn and chat_id and ttn not in sent_ttns:
                        await bot.send_message(int(chat_id), f"üì¶ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –û—Å—å –Ω–æ–º–µ—Ä –¢–¢–ù: *{ttn}*")
                        sent_ttns.add(ttn)

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¢–¢–ù: {e}")

        await asyncio.sleep(30)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(check_new_ttns())
    executor.start_polling(dp, skip_updates=True)

